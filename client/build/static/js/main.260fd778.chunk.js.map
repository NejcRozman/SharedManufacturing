{"version":3,"sources":["assets/balance.png","assets/stake.png","assets/login.svg","context/context.js","components/auth/AuthOptions.js","components/layout/Navbar.js","links.js","components/misc/CreateOrderModal.js","components/layout/Sidebar.js","components/misc/Modal.js","components/misc/Stats.js","components/misc/StakeModal.js","components/pages/Home.js","components/auth/Login.js","components/misc/BarChart.js","components/misc/Trades.js","components/misc/TradeModal.js","components/misc/CancelOrderModal.js","components/pages/Trade.js","components/misc/PieChart.js","components/misc/TransactionsTable.js","components/misc/AllTransactionsTable.js","components/misc/BlockchainData.js","components/misc/ConfirmModal.js","components/pages/Blockchain.js","components/pages/Error.js","App.js","index.js"],"names":["module","exports","AppContext","React","createContext","AppProvider","children","useState","isGameOn","setIsGameOn","isConfirmModalOpen","setIsConfirmModalOpen","isStakeModalOpen","setIsStakeModalOpen","isTradeModalOpen","setIsTradeModalOpen","isCancelOrderModalOpen","setIsCancelOrderModalOpen","isCreateOrderModalOpen","setIsCreateOrderModalOpen","modalContent","setModalContent","confirmModalContent","setConfirmModalContent","tradeModalContent","setTradeModalContent","cancelOrderModalContent","setCancelOrderModalContent","token","undefined","player","otherPrices","pendingTrades","requestedTrades","allPendingTransactions","totalStake","gameData","setGameData","Provider","value","clearGameData","openConfirmModal","closeConfirmModal","openStakeModal","closeStakeModal","openTradeModal","closeTradeModal","openCancelOrderModal","closeCancelOrderModal","openCreateOrderModal","closeCreateOrderModal","useGlobalContext","useContext","AuthOptions","history","useHistory","className","onClick","localStorage","setItem","window","location","reload","push","Navbar","href","links","id","url","text","icon","CreateOrderModal","price","setPrice","showAlert","setShowAlert","alertContent","setAlertContent","confirm","a","isNaN","Math","floor","toString","split","length","parseFloat","amountOfAvailableService","getItem","playerId","data","amountOfService","options","headers","Authorization","Axios","post","document","getElementById","response","message","htmlFor","type","name","placeholder","onChange","e","target","Sidebar","orderExists","setOrderExists","relativeStake","setRelativeStake","orderNotExists","order","orders","filter","item","provider","_id","Array","isArray","useEffect","newRelativeStake","stake","map","link","key","to","style","color","fontSize","balance","Modal","Stats","serviceCompleted","setServiceCompleted","millisToMinutesAndSeconds","millis","d","Date","round","getUTCMinutes","getUTCSeconds","newServiceCompleted","now","serviceTimestamp","timeForService","src","balanceImg","alt","typeOfService","width","stakeImg","amountOfOtherService1","typeOfOtherService1","amountOfOtherService2","typeOfOtherService2","nextTimeForService","StakeModal","newStake","setNewStake","txFee","setTxFee","unstake","console","log","Home","checkLoggedInAndGame","Login","playerName","setPlayerName","password","setPassword","submit","preventDefault","loginPlayer","loginRes","go","loginImg","BarChart","dataArray","modifiedData","realData","setTradeModal","onMouseEnter","event","cursor","mouseHover","keys","indexBy","margin","top","right","bottom","left","padding","valueScale","theme","fontFamily","axis","legend","fontWeight","colors","borderColor","from","modifiers","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","axisLeft","legendPosition","legendOffset","tickValues","tooltip","renderTooltip","label","renderLabel","labelSkipWidth","labelSkipHeight","labelTextColor","animate","motionStiffness","motionDamping","Trade","dataArray1","setDataArray1","dataArray2","setDataArray2","dataArray3","setDataArray3","modifiedDataArray1","setModifiedDataArray1","modifiedDataArray2","setModifiedDataArray2","modifiedDataArray3","setModifiedDataArray3","array1","array2","array3","forEach","sort","b","parseInt","modifiedArray1","modifiedArray2","modifiedArray3","sortDataArrays","TradeModal","tableDataArray","setTableDataArray","orderId","transactions","Promise","all","consumer","players","consumerObject","providerObject","transactionsArray","renderTableData","index","data-tip","data-for","CancelOrderModal","delete","Trades","CenteredMetric","dataWithArc","centerX","centerY","total","x","y","textAnchor","dominantBaseline","PieChart","innerRadius","padAngle","cornerRadius","scheme","borderWidth","enableRadialLabels","sliceLabelsSkipAngle","sliceLabelsTextColor","sortByValue","layers","TransactionsTable","timeLeft","setTimeLeft","setWidth","miningTime","getTime","createdMillis","calculateTimeLeft","background","place","effect","AllTransactionsTable","sortBy","setSortBy","orderOfSort","setOrderOfSort","isChecked","checkBoxes","setCheckBoxes","displayTime","time","toLocaleTimeString","sortDataArray","arrayA","createdAt","timeA","arrayB","timeB","textA","toUpperCase","textB","selectOne","itemName","checked","newArray","filterDataArray","checkedBoxes","selectedTypes","includes","allTransactions","timeString","filteredTransactionsArray","BlockchainData","chartDataArray","setChartDataArray","countDecimals","confirmStake","confirmUnstake","createDataArray","backgroundColor","ConfirmModal","transactionId","tradeId","Blockchain","Error","defaults","baseURL","App","getGameData","get","gameRes","interval","setInterval","clearInterval","exact","path","component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.260fd778.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/balance.6040daaf.png\";","module.exports = __webpack_public_path__ + \"static/media/stake.70483a2e.png\";","module.exports = __webpack_public_path__ + \"static/media/login.9a76e74e.svg\";","import React, { useState, useContext } from 'react'\n\nconst AppContext = React.createContext();\n\nconst AppProvider = ({children}) => {\n    const [isGameOn, setIsGameOn] = useState(false);\n    const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);\n    const [isStakeModalOpen, setIsStakeModalOpen] = useState(false);\n    const [isTradeModalOpen, setIsTradeModalOpen] = useState(false);\n    const [isCancelOrderModalOpen, setIsCancelOrderModalOpen] = useState(false);\n    const [isCreateOrderModalOpen, setIsCreateOrderModalOpen] = useState(false);\n\n    const [modalContent, setModalContent] = useState('');\n    const [confirmModalContent, setConfirmModalContent] = useState('');\n    const [tradeModalContent, setTradeModalContent] = useState('');\n    const [cancelOrderModalContent, setCancelOrderModalContent] = useState('');\n\n    const [gameData, setGameData] = useState({\n        token: undefined,\n        player: undefined,\n        otherPrices: undefined,\n        pendingTrades: undefined,\n        requestedTrades: undefined,\n        allPendingTransactions: undefined,\n        totalStake: undefined\n    });\n\n    const clearGameData = () => {\n        setGameData({\n            token: undefined,\n            player: undefined,\n            otherPrices: undefined,\n            pendingTrades: undefined,\n            requestedTrades: undefined,\n            allPendingTransactions: undefined,\n            totalStake: undefined\n        });\n    };\n\n    const openConfirmModal = () => {\n        setIsConfirmModalOpen(true);\n    };\n    const closeConfirmModal = () => {\n        setIsConfirmModalOpen(false);\n    };\n\n    const openStakeModal = () => {\n        setIsStakeModalOpen(true);\n    };\n    const closeStakeModal = () => {\n        setIsStakeModalOpen(false);\n    };\n\n    const openTradeModal = () => {\n        setIsTradeModalOpen(true);\n    };\n    const closeTradeModal = () => {\n        setIsTradeModalOpen(false);\n    };\n\n    const openCancelOrderModal = () => {\n        setIsCancelOrderModalOpen(true);\n    };\n    const closeCancelOrderModal = () => {\n        setIsCancelOrderModalOpen(false);\n    };\n\n    const openCreateOrderModal = () => {\n        setIsCreateOrderModalOpen(true);\n    };\n    const closeCreateOrderModal = () => {\n        setIsCreateOrderModalOpen(false);\n    };\n\n\n    return (\n        <AppContext.Provider value={{\n            isGameOn,\n            setIsGameOn,\n            gameData,\n            setGameData,\n            clearGameData,\n            modalContent,\n            setModalContent,\n            openConfirmModal,\n            closeConfirmModal,\n            confirmModalContent,\n            setConfirmModalContent,\n            isConfirmModalOpen,\n            openStakeModal,\n            closeStakeModal,\n            isStakeModalOpen,\n            openTradeModal,\n            closeTradeModal,\n            tradeModalContent,\n            setTradeModalContent,\n            isTradeModalOpen,\n            openCancelOrderModal,\n            closeCancelOrderModal,\n            cancelOrderModalContent,\n            setCancelOrderModalContent,\n            isCancelOrderModalOpen,\n            openCreateOrderModal,\n            closeCreateOrderModal,\n            isCreateOrderModalOpen\n        }}>\n            {children}\n        </AppContext.Provider>\n    )\n};\n\n\n\nexport const useGlobalContext = () => {\n    return useContext(AppContext)\n};\n\nexport {AppContext, AppProvider}","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {useGlobalContext} from \"../../context/context\";\n\nexport default function AuthOptions () {\n    const {gameData, clearGameData} = useGlobalContext();\n    const history = useHistory();\n\n    const login = () => history.push(\"/login\");\n    const logout = () => {\n        clearGameData();\n        localStorage.setItem(\"auth-token\", \"\");\n        localStorage.setItem(\"playerId\", \"\");\n        window.location.reload(false);\n    };\n\n    return (\n        <nav>\n            {\n                gameData.player ? (\n                    <button className=\"nav-btn\" onClick={logout}>Log out</button>\n                ) : (\n                    <>\n                        <button className=\"nav-btn\" onClick={login}>Log in</button>\n                    </>\n                )\n            }\n        </nav>\n    )\n};\n","import React from 'react'\n\nimport AuthOptions from '../auth/AuthOptions'\n\nconst Navbar = () => {\n\n  return (\n      <nav>\n          <div className={\"nav-center\"}>\n              <div className='nav-header'>\n                  <h2 className={\"nav-heading\"}>\n                      <a href={'/'}>SharedManufacturing</a>\n                  </h2>\n              </div>\n              <div className='nav-links-container'>\n                  <ul>\n                      <AuthOptions/>\n                  </ul>\n              </div>\n          </div>\n      </nav>\n  )\n\n\n\n\n\n};\n\nexport default Navbar\n","import React from 'react';\nimport {\n    FaHome,\n    FaUserFriends,\n    FaChartPie,\n} from 'react-icons/fa';\nexport const links = [\n    {\n        id: 1,\n        url: '/',\n        text: 'Home',\n        icon: <FaHome />,\n    },\n    {\n        id: 2,\n        url: '/trade',\n        text: 'Trade',\n        icon: <FaUserFriends />,\n    },\n    {\n        id: 3,\n        url: '/blockchain',\n        text: 'Blockchain',\n        icon: <FaChartPie />,\n    }\n];\n","import React, {useState, useEffect} from 'react';\nimport { useGlobalContext} from \"../../context/context\";\nimport { FaTimes } from 'react-icons/fa';\nimport Axios from \"axios/index\";\n\nconst CreateOrderModal = () => {\n    const { gameData, isCreateOrderModalOpen, closeCreateOrderModal } = useGlobalContext();\n    const [price, setPrice] = useState();\n    const [showAlert, setShowAlert] = useState(false);\n    const [alertContent, setAlertContent] = useState('');\n\n    const countDecimals = (value) => {\n        if(Math.floor(value).toString() === value) return 0;\n        return value.toString().split(\".\")[1].length || 0;\n    };\n\n    const confirm = async () => {\n        try {\n            if (price === undefined || price === \"\") {\n                setAlertContent('You must enter a value');\n                setShowAlert(true);\n            } else {\n                if (isNaN(price) || price < 0) {\n                    setAlertContent('Input must be a non-negative number');\n                    setShowAlert(true);\n                } else {\n                    if (countDecimals(price) > 1) {\n                        setAlertContent('Input value can have at most one decimal place');\n                        setShowAlert(true);\n                    } else {\n                        if (parseFloat(price) > 3000) {\n                            setAlertContent('Maximum price in this game is 3000');\n                            setShowAlert(true);\n                        } else {\n                            if (gameData.player.amountOfAvailableService === 0) {\n                                setAlertContent('Amount of available services is too low');\n                                setShowAlert(true);\n                            } else {\n                                const token = localStorage.getItem(\"auth-token\");\n                                const playerId = localStorage.getItem(\"playerId\");\n                                const data = {\n                                    amountOfService: 1,\n                                    price: price\n                                };\n                                const options = {\n                                    headers: {\n                                        Authorization: \"Bearer \" + token\n                                    }\n                                };\n                                const createRes =  await Axios.post(`/player/createOrder/${playerId}`, data, options);\n                                closeCreateOrderModal();\n                                setAlertContent('');\n                                setShowAlert(false);\n                                setPrice();\n                                document.getElementById(\"priceInput\").value= \"\";\n                            }\n                        }\n                    }\n                }\n            }\n        } catch(err) {\n            if (err.response !== undefined && err.response.data.message === \"Trade already exists\") {\n                setAlertContent('Trade with this person already exists');\n                setShowAlert(true);\n            }\n        }\n    };\n\n\n    return (\n        <div\n            className={\n                `${isCreateOrderModalOpen ? 'modal-confirm-overlay show-modal-confirm' : 'modal-confirm-overlay'}`\n            }\n        >\n            <div className='modal-confirm-container'>\n                <h3>Set Price</h3>\n                <div className={\"modal-input-group\"}>\n                    <label htmlFor={\"price\"}>Price</label>\n                    <div className=\"modal-input-group-container\">\n                        <input type={\"text\"} name={\"price\"} id={\"priceInput\"} placeholder={\"Enter price\"} onChange={e => setPrice(e.target.value)}/>\n                    </div>\n                </div>\n                <div className={`${showAlert? 'modal-input-alert show-modal-input-alert' : 'modal-input-alert'}`}>\n                    {alertContent}\n                </div>\n                <button className='close-modal-btn' onClick={() => {\n                    closeCreateOrderModal();\n                    setAlertContent('');\n                    setShowAlert(false);\n                    setPrice();\n                    document.getElementById(\"priceInput\").value= \"\";\n                }}>\n                    <FaTimes></FaTimes>\n                </button>\n                <button className='confirm-modal-btn' onClick={confirm}>Confirm</button>\n            </div>\n        </div>\n    )\n};\n\nexport default CreateOrderModal;","import React, {useState, useEffect} from 'react';\nimport { Link } from 'react-router-dom';\nimport { links } from '../../links';\nimport { FaMoneyBillAlt, FaBusinessTime, FaChartPie } from 'react-icons/fa';\nimport { useGlobalContext} from \"../../context/context\";\nimport CreateOrderModal from '../misc/CreateOrderModal';\n\nconst Sidebar = () => {\n    const { gameData, openCreateOrderModal } = useGlobalContext();\n    const [orderExists, setOrderExists] = useState(false);\n    const [relativeStake, setRelativeStake] = useState(0);\n\n    const orderNotExists = async () => {\n        const order = gameData.orders.filter(item => item.provider === gameData.player._id);\n        setOrderExists(!Array.isArray(order) || !order.length);\n    };\n\n    useEffect(() => {\n        orderNotExists();\n        let newRelativeStake = Math.floor((gameData.player.stake / gameData.totalStake) * 100);\n        setRelativeStake(newRelativeStake);\n    }, [gameData]);\n\n    return (\n        <div>\n            <div className=\"sidebar\">\n                <ul className='sidebar-links'>\n                    {links.map((link) => {\n                        const { id, url, text, icon } = link;\n                        return (\n                            <li key={id}>\n                                <Link to={url}>\n                                    {icon}\n                                    {text}\n                                </Link>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n            <div className=\"stats-sidebar\">\n                <h3>Stats</h3>\n                <div className=\"stats-sidebar-values\">\n                    <div className=\"stats-sidebar-values-stat\">\n                        <FaMoneyBillAlt style={{color: \"green\", fontSize: \"22px\"}}/>\n                        <h4>{gameData.player.balance}</h4>\n                    </div>\n                    <div className=\"stats-sidebar-values-stat\">\n                        <FaBusinessTime style={{color: \"#38aaff\", fontSize: \"22px\"}}/>\n                        <h4 style={gameData.player.amountOfAvailableService === 1 ? {color: \"forestgreen\", fontSize: \"18px\"} : {color: \"darkred\", fontSize: \"18px\"}}>{gameData.player.amountOfAvailableService === 1 ? 'AVAILABLE' : 'UNAVAILABLE'}</h4>\n                    </div>\n                    <div className=\"stats-sidebar-values-stat\">\n                        <FaChartPie style={{color: \"#ffba72\", fontSize: \"22px\"}}/>\n                        <h4>{gameData.player.stake} ({relativeStake}%)</h4>\n                    </div>\n                </div>\n            </div>\n            <div className=\"create-order-container\">\n                {gameData.player.amountOfAvailableService === 1 && orderExists ? <button className=\"create-order-btn\" onClick={openCreateOrderModal}>Set Price</button> : ''}\n            </div>\n            <CreateOrderModal/>\n        </div>\n    )\n};\n\nexport default Sidebar","import React from 'react'\nimport { useGlobalContext} from \"../../context/context\";\n\nconst Modal = () => {\n    const { modalContent } = useGlobalContext();\n    return (\n        <div className={'modal-overlay'}>\n            <div className=\"modal-container\">\n                <h2>{modalContent}</h2>\n            </div>\n        </div>\n    )\n};\n\nexport default Modal","import React, {useState, useEffect} from 'react'\nimport { useGlobalContext} from \"../../context/context\";\nimport balanceImg from '../../assets/balance.png';\nimport stakeImg from '../../assets/stake.png';\n\nconst Stats = () => {\n    const { gameData } = useGlobalContext();\n    const [serviceCompleted, setServiceCompleted] = useState(0);\n    const [relativeStake, setRelativeStake] = useState(0);\n\n    function millisToMinutesAndSeconds(millis) {\n        let d = new Date(1000*Math.round(millis/1000));\n        if (d.getUTCMinutes() === 0) {\n            return ( d.getUTCSeconds() + 's' );\n        } else {\n            return ( d.getUTCMinutes() + 'min ' + d.getUTCSeconds() + 's' );\n        }\n    }\n\n    useEffect(() => {\n        if (gameData.player.amountOfAvailableService === 0) {\n            let newServiceCompleted = Math.floor(((Date.now() - gameData.player.serviceTimestamp) / gameData.player.timeForService) * 100);\n            setServiceCompleted(newServiceCompleted);\n        } else {\n            setServiceCompleted(100);\n        }\n        let newRelativeStake = Math.floor((gameData.player.stake / gameData.totalStake) * 100);\n        setRelativeStake(newRelativeStake);\n    }, [gameData]);\n\n    return (\n        <>\n            <div className=\"stats-grid\">\n                <div className=\"grid-item-stats\">\n                    <div className={\"stats-image\"}>\n                        <img src={balanceImg} alt={\"balance\"}/>\n                    </div>\n                    <div className={\"stats-value\"}>\n                        <p>{gameData.player.balance}</p>\n                    </div>\n                </div>\n                <div className=\"grid-item-stats\">\n                    <div className=\"time-value\">\n                        <h2>Service {gameData.player.typeOfService}</h2>\n                    </div>\n                    <div className={`${gameData.player.amountOfAvailableService === 1 ? 'time-value-available' : 'time-value-unavailable'}`}>\n                        <h2>{gameData.player.amountOfAvailableService === 1 ? 'Available' : 'Unavailable'}</h2>\n                    </div>\n                    <div className=\"time-container\">\n                        <div className=\"bar-container\">\n                            <div className=\"bar-filler\" style={{width: `${serviceCompleted}%`}}>\n                                <span className=\"bar-label\">{`${serviceCompleted}%`}</span>\n                            </div>\n                            <div className=\"bottom\">\n                                <p>Time for service = {millisToMinutesAndSeconds(gameData.player.timeForService)}</p>\n                                <i></i>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"grid-item-stats\">\n                    <div className=\"stake-image\">\n                        <img src={stakeImg} alt={\"stake\"}/>\n                    </div>\n                    <div className={\"stake-value\"}>\n                        <p>{gameData.player.stake}</p>\n                    </div>\n                    <div className={\"stake-value\"}>\n                        <p>({relativeStake}%)</p>\n                    </div>\n                </div>\n                <div className=\"grid-item-stats\">\n                    <div className=\"upgrade-value\">\n                        <h2>Upgrade</h2>\n                    </div>\n                    <div className=\"upgrade-container\">\n                        <div className={`${(gameData.player.amountOfOtherService1 > 0) ? 'upgrade-container-green' : 'upgrade-container-red'}`}>\n                            <p>{`${gameData.player.amountOfOtherService1}`} &#215; {`${gameData.player.typeOfOtherService1}`}</p>\n                        </div>\n                        <div>\n                            <p>+</p>\n                        </div>\n                        <div className={`${(gameData.player.amountOfOtherService2 > 0) ? 'upgrade-container-green' : 'upgrade-container-red'}`}>\n                            <p>{`${gameData.player.amountOfOtherService2}`} &#215; {`${gameData.player.typeOfOtherService2}`}</p>\n                        </div>\n                    </div>\n                    <div className=\"upgrade-container\">\n                        <div className=\"upgrade-container-formula\">\n                            <p>{`${gameData.player.typeOfOtherService1}`} + {`${gameData.player.typeOfOtherService2}`} = &#8681; {millisToMinutesAndSeconds(gameData.player.timeForService - gameData.player.nextTimeForService)}</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n};\n\nexport default Stats","import React, {useState, useEffect} from 'react';\nimport { useGlobalContext} from \"../../context/context\";\nimport { FaTimes, FaPlus, FaMinus } from 'react-icons/fa';\nimport Axios from \"axios/index\";\n\nconst StakeModal = () => {\n    const { gameData, isStakeModalOpen, closeStakeModal } = useGlobalContext();\n    const [relativeStake, setRelativeStake] = useState(0);\n    const [newStake, setNewStake] = useState(0);\n    const [txFee, setTxFee] = useState();\n    const [showAlert, setShowAlert] = useState(false);\n    const [alertContent, setAlertContent] = useState('');\n\n    const increaseNewStake = () => {\n        if (newStake <= gameData.player.balance-1) {\n            setNewStake(newStake+1);\n        }\n    };\n\n    const decreaseNewStake = () => {\n        if (newStake >= -(gameData.player.stake-1)) {\n            setNewStake(newStake-1);\n        }\n    };\n\n    const countDecimals = (value) => {\n        if(Math.floor(value).toString() === value) return 0;\n        return value.toString().split(\".\")[1].length || 0;\n    };\n\n    const confirm = async () => {\n        try {\n            if (txFee === undefined || txFee === \"\") {\n                setAlertContent('You must enter a value');\n                setShowAlert(true);\n            } else {\n                if (isNaN(txFee) || txFee < 0) {\n                    setAlertContent('Input must be a positive number');\n                    setShowAlert(true);\n                } else {\n                    if (countDecimals(txFee) > 1) {\n                        setAlertContent('Input value can have at most one decimal place');\n                        setShowAlert(true);\n                    } else {\n                        if (newStake+parseFloat(txFee) > gameData.player.balance) {\n                            setAlertContent('Price and TxFee is higher than balance');\n                            setShowAlert(true);\n                        } else {\n                            const token = localStorage.getItem(\"auth-token\");\n                            const playerId = localStorage.getItem(\"playerId\");\n                            if (newStake > 0) {\n                                const data = {\n                                    stake: newStake.toString(),\n                                    txFee: txFee\n                                };\n                                const options = {\n                                    headers: {\n                                        Authorization: \"Bearer \" + token\n                                    }\n                                };\n                                const confirmRes =  await Axios.post(`/player/stake/${playerId}`, data, options);\n                            } if (newStake < 0) {\n                                const newUnstake = -newStake;\n                                const data = {\n                                    unstake: newUnstake.toString(),\n                                    txFee: txFee\n                                };\n                                const options = {\n                                    headers: {\n                                        Authorization: \"Bearer \" + token\n                                    }\n                                };\n                                const confirmRes =  await Axios.post(`/player/unstake/${playerId}`, data, options);\n                            }\n                            setNewStake(0);\n                            closeStakeModal();\n                            setAlertContent('');\n                            setShowAlert(false);\n                            setTxFee();\n                            document.getElementById(\"inputHolder\").value= \"\";\n                        }\n                    }\n                }\n            }\n\n        } catch(err) {\n            console.log(err);\n        }\n    };\n\n    useEffect(() => {\n        let newRelativeStake = Math.floor((gameData.player.stake / gameData.totalStake) * 100);\n        setRelativeStake(newRelativeStake);\n    }, [gameData]);\n\n    return (\n        <div\n            className={`${\n                isStakeModalOpen ? 'modal-confirm-overlay show-modal-confirm' : 'modal-confirm-overlay'\n                }`}\n        >\n            <div className='modal-confirm-container'>\n                <h3>Stake: {gameData.player.stake} ({relativeStake}%)</h3>\n                <div className=\"stake-modal-container\">\n                    <div>\n                        <button className='decrease-stake-btn' onClick={decreaseNewStake}>\n                            <FaMinus></FaMinus>\n                        </button>\n                    </div>\n                    <div>\n                        <h1>{newStake}</h1>\n                    </div>\n                    <div>\n                        <button className='increase-stake-btn' onClick={increaseNewStake}>\n                            <FaPlus></FaPlus>\n                        </button>\n                    </div>\n                </div>\n                <div className={\"modal-input-group\"}>\n                    <label htmlFor={\"txFee\"}>Tx Fee</label>\n                    <div className=\"modal-input-group-container\">\n                        <input type={\"text\"} name={\"txFee\"} id={\"inputHolder\"} placeholder={\"Enter tx fee\"} onChange={e => setTxFee(e.target.value)}/>\n                    </div>\n                </div>\n                <div className={`${showAlert? 'modal-input-alert show-modal-input-alert' : 'modal-input-alert'}`}>\n                    {alertContent}\n                </div>\n                <button className='close-modal-btn' onClick={() => {\n                    setNewStake(0);\n                    closeStakeModal();\n                    setAlertContent('');\n                    setShowAlert(false);\n                    setTxFee();\n                    document.getElementById(\"inputHolder\").value= \"\";\n                }}>\n                    <FaTimes></FaTimes>\n                </button>\n                <button className='confirm-modal-btn' onClick={confirm}>Confirm</button>\n            </div>\n        </div>\n    )\n};\n\nexport default StakeModal","import React, { useEffect } from 'react';\nimport {useGlobalContext} from \"../../context/context\";\n\nimport Sidebar from '../layout/Sidebar';\nimport Modal from '../misc/Modal';\nimport Stats from '../misc/Stats';\nimport StakeModal from '../misc/StakeModal';\n\n\nconst Home = () => {\n    const { gameData, isGameOn, setModalContent} = useGlobalContext();\n\n\n    useEffect(() => {\n        const checkLoggedInAndGame = async () => {\n            let token = localStorage.getItem(\"auth-token\");\n            let playerId = localStorage.getItem(\"playerId\");\n            if (token !== (null || \"\") && playerId !== (null || \"\")) {\n                if (!isGameOn) {\n                    setModalContent('Wait for the admin to start the game!');\n                }\n            } else {\n                setModalContent('Please log in!');\n            }\n        };\n        checkLoggedInAndGame();\n    }, []);\n\n    return (\n        <div>\n            <div>\n                {\n                    gameData.player ? (\n                        <div>\n                            {\n                                isGameOn ? (\n                                    <div>\n                                        <div className=\"home-grid\">\n                                            <div className=\"item-sidebar\">\n                                                <Sidebar/>\n                                            </div>\n                                            <div className=\"item-content\">\n                                                <Stats/>\n                                            </div>\n                                        </div>\n                                        <StakeModal/>\n                                    </div>\n                                ) : (\n                                    <>\n                                        <Modal/>\n                                    </>\n                                )\n                            }\n                        </div>\n\n                    ) : (\n                        <>\n                            <Modal/>\n                        </>\n                    )\n                }\n            </div>\n        </div>\n    )\n};\n\nexport default Home","import React, { useState } from 'react';\nimport Axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport loginImg from '../../assets/login.svg';\n\nexport default function Login () {\n    const [playerName, setPlayerName] = useState();\n    const [password, setPassword] = useState();\n\n    const [showAlert, setShowAlert] = useState(false);\n\n    const history = useHistory();\n\n    const submit = async (e) => {\n        try {\n            e.preventDefault();\n            const loginPlayer = { playerName, password };\n            const loginRes =  await Axios.post(\"/player/login\", loginPlayer);\n            localStorage.setItem(\"auth-token\", loginRes.data.token);\n            localStorage.setItem(\"playerId\", loginRes.data.id);\n            history.push(\"/\");\n            history.go(0);\n        } catch(err) {\n            if (err.response !== undefined && err.response.data.message === \"Auth failed\") {\n                setShowAlert(true);\n            }\n        }\n    };\n\n    return (\n        <div className=\"login-App\">\n            <div className=\"login\">\n                <div className=\"login-container\">\n                    <div className={\"login-base-container\"}>\n                        <h3>Login</h3>\n                        <div className={\"login-content\"}>\n                            <div className={\"login-image\"}>\n                                <img src={loginImg} alt={\"login\"}/>\n                            </div>\n                            <div className={\"login-form\"}>\n                                <div className={\"login-form-group\"}>\n                                    <label htmlFor={\"playerName\"}>Player name</label>\n                                    <input type={\"text\"} name={\"playerName\"} placeholder={\"Enter name\"} onChange={e => setPlayerName(e.target.value)}/>\n                                </div>\n                                <div className={\"login-form-group\"}>\n                                    <label htmlFor={\"password\"}>Password</label>\n                                    <input type={\"password\"} name={\"password\"} placeholder={\"Enter password\"} onChange={e => setPassword(e.target.value)}/>\n                                </div>\n                            </div>\n                        </div>\n                        <div className={`${showAlert? 'login-alert show-alert' : 'login-alert'}`}>\n                            The name or password is incorrect!\n                        </div>\n                        <div className=\"login-footer\">\n                            <button type=\"button\" className=\"login-btn\" onClick={submit}>\n                                Log in\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n};\n","import React from 'react'\nimport { ResponsiveBar } from '@nivo/bar';\nimport { useGlobalContext} from \"../../context/context\";\n\nconst BarChart = ({dataArray, modifiedData}) => {\n    const { gameData, openTradeModal, setTradeModalContent, openCancelOrderModal, setCancelOrderModalContent } = useGlobalContext();\n\n    const setTradeModal = (data) => {\n        if (data.typeOfService !== gameData.player.typeOfService) {\n            const realData = dataArray.filter(item => item._id === data._id);\n            if (!(!Array.isArray(realData) || !realData.length)) {\n                setTradeModalContent(realData[0]);\n                openTradeModal();\n            }\n        } else {\n            if (data.playerName === gameData.player.playerName) {\n                const realData = dataArray.filter(item => item._id === data._id);\n                if (!(!Array.isArray(realData) || !realData.length)) {\n                    setCancelOrderModalContent(realData[0]);\n                    openCancelOrderModal();\n                }\n            }\n        }\n    };\n\n    const mouseHover = (data, event) => {\n        if (data.typeOfService !== gameData.player.typeOfService) {\n            event.target.style.cursor = 'pointer';\n        } else {\n            if (data.playerName === gameData.player.playerName) {\n                event.target.style.cursor = 'pointer';\n            }\n        }\n    };\n\n    const renderLabel = (data) => {\n        const realData = dataArray.filter(item => item._id === data._id);\n        if (!(!Array.isArray(realData) || !realData.length)) {\n            return realData[0].price.toString();\n        }\n    };\n\n    const renderTooltip = (data) => {\n        const realData = dataArray.filter(item => item._id === data._id);\n        if (!(!Array.isArray(realData) || !realData.length)) {\n            return realData[0].price.toString();\n        }\n    };\n\n    return (\n        <ResponsiveBar\n            data={modifiedData}\n            onClick={(data) => setTradeModal(data.data)}\n            onMouseEnter={(data, event) => mouseHover(data.data, event)}\n            keys={[ 'price' ]}\n            indexBy=\"playerName\"\n            margin={{ top: 10, right: 20, bottom: 50, left: 70 }}\n            padding={0.25}\n            valueScale={{ type: 'symlog'}}\n            theme={{ \"fontSize\": 14, fontFamily: \"Roboto, sans-serif\", axis: { legend: { text: { fontSize: \"16px\", fontWeight: \"bold\", fontFamily: \"Roboto, sans-serif\" } } } }}\n            colors={d => d.data.color}\n            borderColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n            axisTop={null}\n            axisRight={null}\n            axisBottom={{\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n            }}\n            axisLeft={{\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend: 'PRICE',\n                legendPosition: 'middle',\n                legendOffset: -50,\n                tickValues: 3\n            }}\n            tooltip={({ data, id }) => {\n                return (\n                    <strong>\n                        {id} - {data.playerName}: {renderTooltip(data)}\n                    </strong>\n                )\n            }}\n            label={(data) => renderLabel(data.data)}\n            labelSkipWidth={12}\n            labelSkipHeight={12}\n            labelTextColor=\"white\"\n            animate={false}\n            motionStiffness={90}\n            motionDamping={15}\n        />\n    )\n};\n\n\nexport default BarChart","import React, {useState, useEffect} from 'react'\nimport { useGlobalContext} from \"../../context/context\";\nimport BarChart from '../misc/BarChart';\n\n\nconst Trade = () => {\n    const { gameData } = useGlobalContext();\n    const [dataArray1, setDataArray1] = useState([]);\n    const [dataArray2, setDataArray2] = useState([]);\n    const [dataArray3, setDataArray3] = useState([]);\n    const [modifiedDataArray1, setModifiedDataArray1] = useState([]);\n    const [modifiedDataArray2, setModifiedDataArray2] = useState([]);\n    const [modifiedDataArray3, setModifiedDataArray3] = useState([]);\n\n    /*const sortArray = async (array) => {\n        let namesArray = [];\n        for (const item of array) {\n            if (! await namesArray.includes(item.playerName)) {\n                await namesArray.push(item.playerName);\n            }\n        }\n        let finalArray = await Promise.all(namesArray.map( async (item) => {\n            let index = 0;\n            let orders = await array.filter(order => order.playerName === item);\n            orders = await orders.map((order) => {\n                index = index +1;\n                order.playerName = order.playerName+(index).toString();\n                return order;\n            });\n            return orders;\n        }));\n        return finalArray.flat();\n    };*/\n\n\n    useEffect(() => {\n        const sortDataArrays = async () => {\n            let array1 = await gameData.orders.filter(item => item.typeOfService === gameData.player.typeOfOtherService1);\n            let array2 = await gameData.orders.filter(item => item.typeOfService === gameData.player.typeOfOtherService2);\n            let array3 = await gameData.orders.filter(item => item.typeOfService === gameData.player.typeOfService);\n            await array1.forEach((item) => {\n                item.price = parseFloat(item.price);\n                item.color= '#1E90FF';\n            });\n            await array2.forEach((item) => {\n                item.price = parseFloat(item.price);\n                item.color= 'green';\n            });\n            await array3.forEach((item) => {\n                item.price = parseFloat(item.price);\n                if (item.playerName === gameData.player.playerName) {\n                    item.color= '#FFD700';\n                } else {\n                    item.color= \"#FF8C00\";\n                }\n            });\n            await array1.sort((a, b) => parseInt(a.price) - parseInt(b.price));\n            await array2.sort((a, b) => parseInt(a.price) - parseInt(b.price));\n            await array3.sort((a, b) => parseInt(a.price) - parseInt(b.price));\n            setDataArray1(array1);\n            setDataArray2(array2);\n            setDataArray3(array3);\n            let modifiedArray1 = await array1.map((item) => {\n               if (item.price < 1) {\n                   return {...item, price: 0.9};\n               } else {\n                   return {...item};\n               }\n            });\n            let modifiedArray2 = await array2.map((item) => {\n                if (item.price < 1) {\n                    return {...item, price: 0.9};\n                } else {\n                    return {...item};\n                }\n            });\n            let modifiedArray3 = await array3.map((item) => {\n                if (item.price < 1) {\n                    return {...item, price: 0.9};\n                } else {\n                    return {...item};\n                }\n            });\n            setModifiedDataArray1(modifiedArray1);\n            setModifiedDataArray2(modifiedArray2);\n            setModifiedDataArray3(modifiedArray3);\n        };\n        sortDataArrays();\n    }, [gameData]);\n\n    return (\n        <>\n            <div className=\"trades-container\">\n                <div className=\"other-services-trade-container\">\n                    <div className=\"chart-container\">\n                        <div className=\"chart-container-text\">\n                            <h3>Service {`${gameData.player.typeOfOtherService1}`}</h3>\n                        </div>\n                        <div className=\"chart-container-chart\">\n                            <BarChart dataArray={dataArray1} modifiedData={modifiedDataArray1}/>\n                        </div>\n                    </div>\n                    <div className=\"chart-container\">\n                        <div className=\"chart-container-text\">\n                            <h3>Service {`${gameData.player.typeOfOtherService2}`}</h3>\n                        </div>\n                        <div className=\"chart-container-chart\">\n                            <BarChart dataArray={dataArray2} modifiedData={modifiedDataArray2}/>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"my-service-trade-container\">\n                    <div className=\"chart-container\">\n                        <div className=\"chart-container-text\">\n                            <h3>Service {`${gameData.player.typeOfService}`}</h3>\n                        </div>\n                        <div className=\"chart-container-chart\">\n                            <BarChart dataArray={dataArray3} modifiedData={modifiedDataArray3}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n};\n\nexport default Trade;","import React, {useState, useEffect} from 'react';\nimport { useGlobalContext} from \"../../context/context\";\nimport { FaTimes } from 'react-icons/fa';\nimport Axios from \"axios/index\";\n\nconst TradeModal = () => {\n    const { gameData, isTradeModalOpen, closeTradeModal, tradeModalContent } = useGlobalContext();\n    const [txFee, setTxFee] = useState();\n    const [showAlert, setShowAlert] = useState(false);\n    const [alertContent, setAlertContent] = useState('');\n    const [tableDataArray, setTableDataArray] = useState([]);\n\n    const countDecimals = (value) => {\n        if(Math.floor(value).toString() === value) return 0;\n        return value.toString().split(\".\")[1].length || 0;\n    };\n\n    const confirm = async () => {\n        try {\n            if (txFee === undefined || txFee === \"\") {\n                setAlertContent('You must enter a value');\n                setShowAlert(true);\n            } else {\n                if (isNaN(txFee) || txFee < 0) {\n                    setAlertContent('Input must be a positive number');\n                    setShowAlert(true);\n                } else {\n                    if (countDecimals(txFee) > 1) {\n                        setAlertContent('Input value can have at most one decimal place');\n                        setShowAlert(true);\n                    } else {\n                        if (parseFloat(tradeModalContent.price)+parseFloat(txFee) > gameData.player.balance) {\n                            setAlertContent('Price and TxFee is higher than balance');\n                            setShowAlert(true);\n                        } else {\n                            const token = localStorage.getItem(\"auth-token\");\n                            const playerId = localStorage.getItem(\"playerId\");\n                            const data = {\n                                orderId: tradeModalContent._id,\n                                txFee: parseFloat(txFee)\n                            };\n                            const options = {\n                                headers: {\n                                    Authorization: \"Bearer \" + token\n                                }\n                            };\n                            const createRes =  await Axios.post(`/player/createTransaction/${playerId}`, data, options);\n                            closeTradeModal();\n                            setAlertContent('');\n                            setShowAlert(false);\n                            setTxFee();\n                            document.getElementById(\"inputHolder\").value= \"\";\n                        }\n                    }\n                }\n            }\n        } catch(err) {\n            if (err.response !== undefined && err.response.data.message === \"Trade already exists\") {\n                setAlertContent('Trade with this person already exists');\n                setShowAlert(true);\n            }\n        }\n    };\n\n    useEffect(() => {\n        const renderTableData = async () => {\n            const transactions = await gameData.allPendingTransactions.sort((a, b) => parseInt(b.txFee) - parseInt(a.txFee));\n            const transactionsArray = await Promise.all(transactions.map(async (item) => {\n                let { consumer, provider, typeOfService, amountOfService, price, txFee } = item;\n                const consumerObject = await gameData.players.filter(player => player._id === consumer);\n                const providerObject = await gameData.players.filter(player => player._id === provider);\n                if (!Array.isArray(providerObject) || !providerObject.length) {\n                    return (\n                        {\n                            id: item._id,\n                            consumer: consumerObject[0].playerName,\n                            provider: \"Blockchain\",\n                            typeOfService: typeOfService,\n                            amountOfService: amountOfService,\n                            price: price,\n                            txFee: txFee,\n                            type: \"cancel transaction\"\n                        }\n                    )\n                }\n                return (\n                    {\n                        id: item._id,\n                        consumer: consumerObject[0].playerName,\n                        provider: providerObject[0].playerName,\n                        typeOfService: typeOfService,\n                        amountOfService: amountOfService,\n                        price: price,\n                        txFee: txFee,\n                        type: \"cancel transaction\"\n                    }\n                )\n            }));\n            setTableDataArray(transactionsArray);\n        };\n        renderTableData();\n    }, [gameData]);\n\n    return (\n        <div\n            className={\n                `${isTradeModalOpen ? 'modal-confirm-overlay show-modal-confirm' : 'modal-confirm-overlay'}`\n            }\n        >\n            <div className='modal-confirm-container'>\n                <h3>Create Trade</h3>\n                <div className='modal-confirm-container-data'>\n                    <div className='modal-confirm-container-input'>\n                        <ul>\n                            <li>Player: {tradeModalContent.playerName}</li>\n                            <li>typeOfService: {tradeModalContent.typeOfService}</li>\n                            <li>price: {tradeModalContent.price}</li>\n                        </ul>\n                        <div className={\"trade-modal-input-group\"}>\n                            <label htmlFor={\"txFee\"}>Tx Fee</label>\n                            <div className=\"trade-modal-input-group-container\">\n                                <input type={\"text\"} name={\"txFee\"} id={\"inputHolder\"} placeholder={\"Enter tx fee\"} onChange={e => setTxFee(e.target.value)}/>\n                            </div>\n                        </div>\n                        <div className={`${showAlert? 'trade-modal-input-alert show-trade-modal-input-alert' : 'trade-modal-input-alert'}`}>\n                            {alertContent}\n                        </div>\n                    </div>\n                    <div className=\"trade-modal-table-container\">\n                        <table className=\"modal-table-pending-transactions\">\n                            <thead>\n                            <tr>\n                                <th className=\"table-pending-transactions-head\">No.</th>\n                                <th className=\"table-pending-transactions-head\">Pending transactions</th>\n                                <th className=\"table-pending-transactions-head\">Tx Fee</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {\n                                tableDataArray.map((item, index) => (\n                                    <tr\n                                        key={item.id}\n                                        data-tip data-for={item.id}\n                                    >\n                                        <td><strong>{index + 1}</strong></td>\n                                        <td>\n                                            {item.consumer} &#8646; {item.provider}\n                                        </td>\n                                        <td>{item.txFee}</td>\n                                    </tr>\n                                ))\n                            }\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                <button className='close-modal-btn' onClick={() => {\n                    closeTradeModal();\n                    setAlertContent('');\n                    setShowAlert(false);\n                    setTxFee();\n                    document.getElementById(\"inputHolder\").value= \"\";\n                }}>\n                    <FaTimes></FaTimes>\n                </button>\n                <button className='confirm-modal-btn' onClick={confirm}>Confirm</button>\n            </div>\n        </div>\n    )\n};\n\nexport default TradeModal","import React from 'react'\nimport { useGlobalContext} from \"../../context/context\";\nimport { FaTimes } from 'react-icons/fa';\nimport Axios from \"axios/index\";\n\nconst CancelOrderModal = () => {\n    const { isCancelOrderModalOpen, closeCancelOrderModal, cancelOrderModalContent } = useGlobalContext();\n\n    const confirm = async () => {\n        try {\n            const token = localStorage.getItem(\"auth-token\");\n            const playerId = localStorage.getItem(\"playerId\");\n\n            const confirmRes =  await Axios.delete(`/player/cancelOrder/${playerId}`, {\n                headers: {\n                    Authorization: \"Bearer \" + token\n                },\n                data: {\n                    orderId: cancelOrderModalContent._id\n                }\n            });\n            closeCancelOrderModal();\n        } catch(err) {\n            console.log(err);\n        }\n    };\n\n    return (\n        <div\n            className={`${\n                isCancelOrderModalOpen ? 'modal-confirm-overlay show-modal-confirm' : 'modal-confirm-overlay'\n                }`}\n        >\n            <div className='modal-confirm-container'>\n                <h3>Are you sure you want to cancel offer:</h3>\n                <ul>\n                    <li>Player: {cancelOrderModalContent.playerName}</li>\n                    <li>typeOfService: {cancelOrderModalContent.typeOfService}</li>\n                    <li>price: {cancelOrderModalContent.price}</li>\n                </ul>\n                <button className='close-modal-btn' onClick={closeCancelOrderModal}>\n                    <FaTimes></FaTimes>\n                </button>\n                <button className='confirm-modal-btn' onClick={confirm}>Confirm</button>\n            </div>\n        </div>\n    )\n};\n\nexport default CancelOrderModal","import React, { useEffect } from 'react';\nimport {useGlobalContext} from \"../../context/context\";\n\nimport Sidebar from '../layout/Sidebar';\nimport Modal from '../misc/Modal';\nimport Trades from '../misc/Trades';\nimport TradeModal from '../misc/TradeModal';\nimport CancelOrderModal from '../misc/CancelOrderModal';\n\n\n\nconst Trade = () => {\n    const { gameData, isGameOn, setModalContent } = useGlobalContext();\n\n\n    useEffect(() => {\n        const checkLoggedInAndGame = async () => {\n            let token = localStorage.getItem(\"auth-token\");\n            let playerId = localStorage.getItem(\"playerId\");\n            if (token !== (null || \"\") && playerId !== (null || \"\")) {\n                if (!isGameOn) {\n                    setModalContent('Wait for the admin to start the game!');\n                }\n            } else {\n                setModalContent('Please log in!');\n            }\n        };\n        checkLoggedInAndGame();\n    }, []);\n\n    return (\n        <div>\n            <div>\n                {\n                    gameData.player ? (\n                        <div>\n                            {\n                                isGameOn ? (\n                                    <div>\n                                        <div className=\"home-grid\">\n                                            <div className=\"item-sidebar\">\n                                                <Sidebar/>\n                                            </div>\n                                            <div className=\"item-content\">\n                                                <Trades/>\n                                            </div>\n                                        </div>\n                                        <TradeModal/>\n                                        <CancelOrderModal/>\n                                    </div>\n                                ) : (\n                                    <>\n                                        <Modal/>\n                                    </>\n                                )\n                            }\n                        </div>\n\n                    ) : (\n                        <>\n                            <Modal/>\n                        </>\n                    )\n                }\n            </div>\n        </div>\n    )\n};\n\nexport default Trade","import React from 'react';\nimport { useGlobalContext} from \"../../context/context\";\nimport { ResponsivePie } from '@nivo/pie'\n\nconst CenteredMetric = ({ dataWithArc, centerX, centerY }) => {\n    const { gameData } = useGlobalContext();\n    let total = gameData.totalStake;\n    return (\n        <text\n            x={centerX}\n            y={centerY}\n            textAnchor=\"middle\"\n            dominantBaseline=\"central\"\n            style={{\n                fontSize: '25px',\n                fontWeight: '500',\n            }}\n        >\n            {total}\n        </text>\n    )\n};\n\nconst PieChart = ({ data }) => (\n\n    <ResponsivePie\n        data={data}\n        theme={{ \"fontSize\": 16, fontFamily: \"Roboto, sans-serif\", axis: { legend: { text: { fontSize: \"16px\", fontWeight: \"bold\", fontFamily: \"Roboto, sans-serif\" } } } }}\n        margin={{ top: 20, right: 20, bottom: 20, left: 20 }}\n        innerRadius={0.3}\n        padAngle={1}\n        cornerRadius={3}\n        colors={{ scheme: 'yellow_orange_red' }}\n        borderWidth={1}\n        borderColor={{ from: 'color', modifiers: [ [ 'darker', 0.2 ] ] }}\n        enableRadialLabels={false}\n        sliceLabelsSkipAngle={10}\n        sliceLabelsTextColor=\"#333333\"\n        sortByValue={true}\n        layers={['slices', 'sliceLabels', CenteredMetric]}\n    />\n);\n\nexport default PieChart","import React, {useState, useEffect} from 'react';\nimport ReactTooltip from 'react-tooltip';\nimport { useGlobalContext} from \"../../context/context\";\nimport { FaTimes } from 'react-icons/fa';\n\n\nconst TransactionsTable = () => {\n    const { gameData, openConfirmModal, setConfirmModalContent } = useGlobalContext();\n    const [tableDataArray, setTableDataArray] = useState([]);\n    const [timeLeft, setTimeLeft] = useState('');\n    const [width, setWidth] = useState(0);\n\n    function millisToMinutesAndSeconds(millis) {\n        let d = new Date(1000*Math.round(millis/1000));\n        if (d.getUTCMinutes() === 0) {\n            return ( d.getUTCSeconds() + 's' );\n        } else {\n            return ( d.getUTCMinutes() + 'min ' + d.getUTCSeconds() + 's' );\n        }\n    }\n\n    const setCancelTransactionModal = (transaction) => {\n        setConfirmModalContent(transaction);\n        openConfirmModal();\n    };\n\n    useEffect(() => {\n        const renderTableData = async () => {\n            const transactions = await gameData.allPendingTransactions.sort((a, b) => parseFloat(b.txFee) - parseFloat(a.txFee));\n            const transactionsArray = await Promise.all(transactions.map(async (item) => {\n                let { consumer, provider, typeOfService, amountOfService, price, txFee } = item;\n                const consumerObject = await gameData.players.filter(player => player._id === consumer);\n                const providerObject = await gameData.players.filter(player => player._id === provider);\n                if (!Array.isArray(providerObject) || !providerObject.length) {\n                    return (\n                        {\n                            id: item._id,\n                            consumer: consumerObject[0].playerName,\n                            provider: \"Blockchain\",\n                            typeOfService: typeOfService,\n                            amountOfService: amountOfService,\n                            price: price,\n                            txFee: txFee,\n                            type: \"cancel transaction\"\n                        }\n                    )\n                }\n                return (\n                    {\n                        id: item._id,\n                        consumer: consumerObject[0].playerName,\n                        provider: providerObject[0].playerName,\n                        typeOfService: typeOfService,\n                        amountOfService: amountOfService,\n                        price: price,\n                        txFee: txFee,\n                        type: \"cancel transaction\"\n                    }\n                )\n            }));\n            setTableDataArray(transactionsArray);\n        };\n        renderTableData();\n        const calculateTimeLeft = async () => {\n            const createdMillis = await new Date(gameData.miningTime).getTime();\n            let timeLeft = 10000 - (Date.now() - createdMillis);\n            let width = await Math.floor((1 - ((Date.now() - createdMillis) / 10000)) * 100);\n            if (width < 0 || timeLeft < 0) {\n                width = 0;\n                timeLeft = 0;\n            }\n            setTimeLeft(millisToMinutesAndSeconds(timeLeft));\n            setWidth(width);\n        };\n        calculateTimeLeft();\n    }, [gameData]);\n\n\n    return (\n        <>\n            <div className=\"pending-transactions-container\">\n                <div className=\"mining-progress-container\">\n                    <div className=\"mining-progress-flex\">\n                        <p>Mining</p>\n                        <div className=\"mining-progress\">\n                            <div className=\"mining-progress-filler\" style={{width: `${width}%`}}></div>\n                        </div>\n                    </div>\n                    <span className=\"mining-progress-text\">Time left: {timeLeft}</span>\n                </div>\n                <div className=\"table-pending-transactions-container\">\n                    <table className=\"table-pending-transactions\">\n                        <thead>\n                        <tr>\n                            <th className=\"table-pending-transactions-head\">No.</th>\n                            <th className=\"table-pending-transactions-head\">Pending transactions</th>\n                            <th className=\"table-pending-transactions-head\">Tx Fee</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {\n                            tableDataArray.map((item, index) => (\n                                <tr\n                                    key={item.id}\n                                    data-tip data-for={item.id}\n                                    style={{background: `${(item.consumer === gameData.player.playerName) || (item.provider === gameData.player.playerName) ? '#fffd6c' : ''}`}}\n                                >\n                                    <td><strong>{index + 1}</strong></td>\n                                    <td>\n                                        {item.consumer} &#8646; {item.provider}\n                                        {item.consumer === gameData.player.playerName ?\n                                            <button\n                                                className='cancel-transaction-btn'\n                                                onClick={() => { ((item.consumer === gameData.player.playerName) || (item.provider === gameData.player.playerName)) && setCancelTransactionModal(item)}}\n                                            >\n                                                <FaTimes></FaTimes>\n                                            </button>\n                                            :''}\n                                    </td>\n                                    <td>{item.txFee}</td>\n                                    <td className=\"table-pending-transactions-tooltip\">\n                                        <ReactTooltip className=\"table-pending-transactions-head-tooltip-react\" id={item.id} place=\"bottom\" type=\"dark\" effect=\"solid\">\n                                            <ul>\n                                                <li>Consumer: {item.consumer}</li>\n                                                <li>Provider: {item.provider}</li>\n                                                <li>typeOfService: {item.typeOfService}</li>\n                                                <li>price: {item.price}</li>\n                                            </ul>\n                                        </ReactTooltip>\n                                    </td>\n                                </tr>\n                            ))\n                        }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </>\n    )\n};\n\nexport default TransactionsTable","import React, {useState, useEffect} from 'react';\nimport { useGlobalContext} from \"../../context/context\";\nimport { FaArrowUp, FaArrowDown } from 'react-icons/fa';\n\nconst AllTransactionsTable = () => {\n    const { gameData,  } = useGlobalContext();\n    const [tableDataArray, setTableDataArray] = useState([]);\n    const [sortBy, setSortBy] = useState('time');\n    const [orderOfSort, setOrderOfSort] = useState('ascending');\n    const [checkBoxes, setCheckBoxes] = useState([{type: \"A\", isChecked: false}, {type: \"B\", isChecked: false}, {type: \"C\", isChecked: false}, {type: \"Stake\", isChecked: false}, {type: \"Unstake\", isChecked: false}]);\n\n    const displayTime = async (time) => {\n        const createdMillis = await new Date(time);\n        return createdMillis.toLocaleTimeString('it-IT');\n    };\n\n    const sortDataArray = async (dataArray) => {\n        if (sortBy === 'time') {\n            return await dataArray.sort((a, b) => {\n                let arrayA = a.createdAt.split(\":\");\n                let timeA = (parseInt(arrayA[0], 10) * 60 * 60) + (parseInt(arrayA[1], 10) * 60) + parseInt(arrayA[2], 10);\n                let arrayB = b.createdAt.split(\":\");\n                let timeB = (parseInt(arrayB[0], 10) * 60 * 60) + (parseInt(arrayB[1], 10) * 60) + parseInt(arrayB[2], 10);\n                if (orderOfSort === \"descending\") {\n                    return timeB - timeA;\n                } if (orderOfSort === \"ascending\") {\n                    return timeA - timeB;\n                }\n            });\n        } if (sortBy === 'consumer') {\n            return await dataArray.sort((a, b) => {\n                let textA = a.consumer.toUpperCase();\n                let textB = b.consumer.toUpperCase();\n                if (orderOfSort === \"descending\") {\n                    return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\n                } if (orderOfSort === \"ascending\") {\n                    return (textA > textB) ? -1 : (textA < textB) ? 1 : 0;\n                }\n            });\n        } if (sortBy === 'provider') {\n            return await dataArray.sort((a, b) => {\n                let textA = a.provider.toUpperCase();\n                let textB = b.provider.toUpperCase();\n                if (orderOfSort === \"descending\") {\n                    return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\n                } if (orderOfSort === \"ascending\") {\n                    return (textA > textB) ? -1 : (textA < textB) ? 1 : 0;\n                }\n            });\n        } if (sortBy === 'typeOfService') {\n            return await dataArray.sort((a, b) => {\n                let textA = a.typeOfService.toUpperCase();\n                let textB = b.typeOfService.toUpperCase();\n                if (orderOfSort === \"descending\") {\n                    return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\n                } if (orderOfSort === \"ascending\") {\n                    return (textA > textB) ? -1 : (textA < textB) ? 1 : 0;\n                }\n            });\n        } if (sortBy === 'price') {\n            if (orderOfSort === \"descending\") {\n                return await dataArray.sort((a, b) => parseFloat(b.price) - parseFloat(a.price));\n            } if (orderOfSort === \"ascending\") {\n                return await dataArray.sort((a, b) => parseFloat(a.price) - parseFloat(b.price));\n            }\n        } if (sortBy === 'txFee') {\n            if (orderOfSort === \"descending\") {\n                return await dataArray.sort((a, b) => parseFloat(b.txFee) - parseFloat(a.txFee));\n            } if (orderOfSort === \"ascending\") {\n                return await dataArray.sort((a, b) => parseFloat(a.txFee) - parseFloat(b.txFee));\n            }\n        }\n    };\n\n    const selectOne = async (e) => {\n        let itemName = e.target.name;\n        let checked = e.target.checked;\n        const newArray = await checkBoxes.map(item =>\n            item.type === itemName ? { ...item, isChecked: checked } : item\n        );\n        setCheckBoxes(newArray);\n    };\n\n    const filterDataArray = async (dataArray) => {\n        const checkedBoxes = await checkBoxes.filter(item => item.isChecked);\n        const selectedTypes = await checkedBoxes.map(item => item.type);\n        if (!Array.isArray(selectedTypes) || !selectedTypes.length) {\n            return dataArray;\n        }\n        return dataArray.filter(data => selectedTypes.includes(data.typeOfService));\n    };\n\n    useEffect(() => {\n        const renderTableData = async () => {\n            const transactionsArray = await Promise.all(gameData.allTransactions.map(async (item) => {\n                let { consumer, provider, typeOfService, amountOfService, price, txFee, createdAt } = item;\n                const consumerObject = await gameData.players.filter(player => player._id === consumer);\n                const providerObject = await gameData.players.filter(player => player._id === provider);\n                const timeString = await displayTime(createdAt);\n                if (!Array.isArray(providerObject) || !providerObject.length) {\n                    return (\n                        {\n                            id: item._id,\n                            consumer: consumerObject[0].playerName,\n                            provider: \"Blockchain\",\n                            typeOfService: typeOfService,\n                            amountOfService: amountOfService,\n                            price: price,\n                            txFee: txFee,\n                            type: \"cancel transaction\",\n                            createdAt: timeString\n                        }\n                    )\n                }\n                return (\n                    {\n                        id: item._id,\n                        consumer: consumerObject[0].playerName,\n                        provider: providerObject[0].playerName,\n                        typeOfService: typeOfService,\n                        amountOfService: amountOfService,\n                        price: price,\n                        txFee: txFee,\n                        type: \"cancel transaction\",\n                        createdAt: timeString\n                    }\n                )\n            }));\n            const filteredTransactionsArray = await filterDataArray(transactionsArray);\n            const dataArray = await sortDataArray(filteredTransactionsArray);\n            setTableDataArray(dataArray);\n        };\n        renderTableData();\n    }, [gameData]);\n\n\n    return (\n        <>\n            <div className=\"table-all-transactions-container\">\n                <div className=\"filter-all-transactions\">\n                    {\n                        checkBoxes.map((item) => (\n                            <label className=\"checkbox-container\" key={item.type}>{item.type}\n                                <input type=\"checkbox\" name={item.type} checked={item.isChecked} onChange={selectOne}/>\n                                <span className=\"checkmark\"></span>\n                            </label>\n                        ))\n                    }\n                </div>\n                <div className=\"table-all-transactions-overflow\">\n                    <table className=\"table-all-transactions\">\n                        <thead>\n                        <tr>\n                            <th onClick={() => {\n                                setSortBy('time');\n                                if (orderOfSort === 'ascending') {\n                                    setOrderOfSort('descending');\n                                } if (orderOfSort === 'descending') {\n                                    setOrderOfSort('ascending');\n                                }\n                            }}>Time {sortBy === 'time' ? orderOfSort === 'ascending' ? <FaArrowUp/> : <FaArrowDown/> : \"\"}</th>\n                            <th onClick={() => {\n                                setSortBy('consumer');\n                                if (orderOfSort === 'ascending') {\n                                    setOrderOfSort('descending');\n                                } if (orderOfSort === 'descending') {\n                                    setOrderOfSort('ascending');\n                                }\n                            }}>Consumer {sortBy === 'consumer' ? orderOfSort === 'ascending' ? <FaArrowUp/> : <FaArrowDown/> : \"\"}</th>\n                            <th onClick={() => {\n                                setSortBy('provider');\n                                if (orderOfSort === 'ascending') {\n                                    setOrderOfSort('descending');\n                                } if (orderOfSort === 'descending') {\n                                    setOrderOfSort('ascending');\n                                }\n                            }}>Provider {sortBy === 'provider' ? orderOfSort === 'ascending' ? <FaArrowUp/> : <FaArrowDown/> : \"\"}</th>\n                            <th onClick={() => {\n                                setSortBy('typeOfService');\n                                if (orderOfSort === 'ascending') {\n                                    setOrderOfSort('descending');\n                                } if (orderOfSort === 'descending') {\n                                    setOrderOfSort('ascending');\n                                }\n                            }}>Type of service {sortBy === 'typeOfService' ? orderOfSort === 'ascending' ? <FaArrowUp/> : <FaArrowDown/> : \"\"}</th>\n                            <th onClick={() => {\n                                setSortBy('price');\n                                if (orderOfSort === 'ascending') {\n                                    setOrderOfSort('descending');\n                                } if (orderOfSort === 'descending') {\n                                    setOrderOfSort('ascending');\n                                }\n                            }}>Price/Amount {sortBy === 'price' ? orderOfSort === 'ascending' ? <FaArrowUp/> : <FaArrowDown/> : \"\"}</th>\n                            <th onClick={() => {\n                                setSortBy('txFee');\n                                if (orderOfSort === 'ascending') {\n                                    setOrderOfSort('descending');\n                                } if (orderOfSort === 'descending') {\n                                    setOrderOfSort('ascending');\n                                }\n                            }}>Tx Fee {sortBy === 'txFee' ? orderOfSort === 'ascending' ? <FaArrowUp/> : <FaArrowDown/> : \"\"}</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {\n                            tableDataArray.map((item) =>\n                                (\n                                    <tr key={item.id}>\n                                        <td>{item.createdAt}</td>\n                                        <td>{item.consumer}</td>\n                                        <td>{item.provider}</td>\n                                        <td>{item.typeOfService}</td>\n                                        <td>{item.price}</td>\n                                        <td>{item.txFee}</td>\n                                    </tr>\n                                )\n                            )\n                        }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </>\n    )\n};\n\nexport default AllTransactionsTable","import React, {useState, useEffect} from 'react';\nimport { useGlobalContext} from \"../../context/context\";\nimport PieChart from '../misc/PieChart';\nimport TransactionsTable from '../misc/TransactionsTable';\nimport AllTransactionsTable from '../misc/AllTransactionsTable';\nimport Axios from \"axios/index\";\n\n\n\nconst BlockchainData = () => {\n    const { gameData } = useGlobalContext();\n    const [chartDataArray, setChartDataArray] = useState([]);\n    const [relativeStake, setRelativeStake] = useState(0);\n    const [newStake, setNewStake] = useState(0);\n    const [txFee, setTxFee] = useState();\n    const [showAlert, setShowAlert] = useState(false);\n    const [alertContent, setAlertContent] = useState('');\n\n    const countDecimals = (value) => {\n        if(Math.floor(value).toString() === value) return 0;\n        return value.toString().split(\".\")[1].length || 0;\n    };\n\n    const confirmStake = async () => {\n        try {\n            if ((txFee === undefined || txFee === \"\") || (newStake === undefined || newStake === \"\")) {\n                setAlertContent('You must enter a value');\n                setShowAlert(true);\n            } else {\n                if ((isNaN(txFee) || txFee <= 0) || (isNaN(newStake) || newStake <= 0)) {\n                    setAlertContent('Amount and tx fee must be a positive number bigger than 0');\n                    setShowAlert(true);\n                } else {\n                    if ((countDecimals(txFee) > 1) || (countDecimals(newStake) > 1)) {\n                        setAlertContent('Input value can have at most one decimal place');\n                        setShowAlert(true);\n                    } else {\n                        if (parseFloat(newStake)+parseFloat(txFee) > gameData.player.balance) {\n                            setAlertContent('Amount + TxFee is bigger than balance');\n                            setShowAlert(true);\n                        } else {\n                            const token = localStorage.getItem(\"auth-token\");\n                            const playerId = localStorage.getItem(\"playerId\");\n                            const data = {\n                                stake: newStake,\n                                txFee: txFee\n                            };\n                            const options = {\n                                headers: {\n                                    Authorization: \"Bearer \" + token\n                                }\n                            };\n                            const confirmRes =  await Axios.post(`/player/stake/${playerId}`, data, options);\n                            setNewStake(0);\n                            setAlertContent('');\n                            setShowAlert(false);\n                            setTxFee();\n                            document.getElementById(\"inputHolder\").value= \"\";\n                            document.getElementById(\"amountHolder\").value= \"\";\n                        }\n                    }\n                }\n            }\n\n        } catch(err) {\n            console.log(err);\n        }\n    };\n\n    const confirmUnstake = async () => {\n        try {\n            if ((txFee === undefined || txFee === \"\") || (newStake === undefined || newStake === \"\")) {\n                setAlertContent('You must enter a value');\n                setShowAlert(true);\n            } else {\n                if ((isNaN(txFee) || txFee <= 0) || (isNaN(newStake) || newStake <= 0)) {\n                    setAlertContent('Amount and tx fee must be a positive number bigger than 0');\n                    setShowAlert(true);\n                } else {\n                    if ((countDecimals(txFee) > 1) || (countDecimals(newStake) > 1)) {\n                        setAlertContent('Input value can have at most one decimal place');\n                        setShowAlert(true);\n                    } else {\n                        if (parseFloat(newStake) > gameData.player.stake) {\n                            setAlertContent('Amount is bigger than your stake');\n                            setShowAlert(true);\n                        } else {\n                            const token = localStorage.getItem(\"auth-token\");\n                            const playerId = localStorage.getItem(\"playerId\");\n                            const data = {\n                                unstake: newStake,\n                                txFee: txFee\n                            };\n                            const options = {\n                                headers: {\n                                    Authorization: \"Bearer \" + token\n                                }\n                            };\n                            const confirmRes =  await Axios.post(`/player/unstake/${playerId}`, data, options);\n                            setNewStake(0);\n                            setAlertContent('');\n                            setShowAlert(false);\n                            setTxFee();\n                            document.getElementById(\"inputHolder\").value= \"\";\n                            document.getElementById(\"amountHolder\").value= \"\";\n                        }\n                    }\n                }\n            }\n\n        } catch(err) {\n            console.log(err);\n        }\n    };\n\n    useEffect(() => {\n        const createDataArray = async () => {\n            const dataArray = await gameData.players.map((item) => {\n                return({\n                    id: item.playerName,\n                    value: parseInt(item.stake)\n                });\n            });\n            setChartDataArray(dataArray);\n        };\n        createDataArray();\n        let newRelativeStake = Math.floor((gameData.player.stake / gameData.totalStake) * 100);\n        setRelativeStake(newRelativeStake);\n    }, [gameData]);\n\n\n\n    return (\n        <>\n            <div className=\"blockchain-container\">\n                <div className=\"blockchain-info-container\">\n                    <TransactionsTable/>\n                    <div className=\"piechart-container\">\n                        <div className=\"piechart-container-text\">\n                            <h3>Blockchain - stake</h3>\n                            <h4>Your stake: {gameData.player.stake} ({relativeStake}%)</h4>\n                        </div>\n                        <div className=\"piechart-container-chart-stake\">\n                            <div className=\"piechart-container-chart\">\n                                <PieChart data={chartDataArray}/>\n                            </div>\n                            <div className=\"stake-input-container\">\n                                <div className={\"modal-input-group\"}>\n                                    <label htmlFor={\"Amount\"}>Amount</label>\n                                    <div className=\"modal-input-group-container\">\n                                        <input style={{backgroundColor: \"#dbdbdb\"}} type={\"text\"} name={\"amount\"} id={\"amountHolder\"} placeholder={\"Enter amount\"} onChange={e => setNewStake(e.target.value)}/>\n                                    </div>\n                                </div>\n                                <div className={\"modal-input-group\"}>\n                                    <label htmlFor={\"txFee\"}>Tx Fee</label>\n                                    <div className=\"modal-input-group-container\">\n                                        <input style={{backgroundColor: \"#dbdbdb\"}} type={\"text\"} name={\"txFee\"} id={\"inputHolder\"} placeholder={\"Enter tx fee\"} onChange={e => setTxFee(e.target.value)}/>\n                                    </div>\n                                </div>\n                                <div className={`${showAlert? 'modal-input-alert show-modal-input-alert' : 'modal-input-alert'}`}>\n                                    {alertContent}\n                                </div>\n                                <button className='confirm-stake-btn' onClick={() => confirmStake()}>Stake</button>\n                                <button className='confirm-unstake-btn' onClick={() => confirmUnstake()}>Unstake</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"all-transactions-container\">\n                    <h3>Transactions History</h3>\n                    <AllTransactionsTable/>\n                </div>\n            </div>\n        </>\n    )\n};\n\nexport default BlockchainData","import React from 'react'\nimport { useGlobalContext} from \"../../context/context\";\nimport { FaTimes } from 'react-icons/fa';\nimport Axios from \"axios/index\";\n\nconst ConfirmModal = () => {\n    const { isConfirmModalOpen, closeConfirmModal, confirmModalContent } = useGlobalContext();\n\n    const confirm = async () => {\n        try {\n            const token = localStorage.getItem(\"auth-token\");\n            const playerId = localStorage.getItem(\"playerId\");\n            if (confirmModalContent.type === \"cancel transaction\") {\n                const confirmRes =  await Axios.delete(`/player/cancelTransaction/${playerId}`, {\n                    headers: {\n                        Authorization: \"Bearer \" + token\n                    },\n                    data: {\n                        transactionId: confirmModalContent.id\n                    }\n                });\n            }\n            if (confirmModalContent.type === \"cancel trade\") {\n                const confirmRes =  await Axios.delete(`/player/cancelTrade/${playerId}`, {\n                    headers: {\n                        Authorization: \"Bearer \" + token\n                    },\n                    data: {\n                        tradeId: confirmModalContent.id\n                    }\n                });\n            }\n            if (confirmModalContent.type === \"accept trade\") {\n                const data = {\n                    tradeId: confirmModalContent.id\n                };\n                const options = {\n                    headers: {\n                        Authorization: \"Bearer \" + token\n                    }\n                };\n                const confirmRes =  await Axios.post(`/player/acceptTrade/${playerId}`, data, options);\n            }\n            if (confirmModalContent.type === \"reject trade\") {\n                const confirmRes =  await Axios.delete(`/player/rejectTrade/${playerId}`, {\n                    headers: {\n                        Authorization: \"Bearer \" + token\n                    },\n                    data: {\n                        tradeId: confirmModalContent.id\n                    }\n                });\n            }\n            closeConfirmModal();\n        } catch(err) {\n            console.log(err);\n        }\n    };\n\n    return (\n        <div\n            className={`${\n                isConfirmModalOpen ? 'modal-confirm-overlay show-modal-confirm' : 'modal-confirm-overlay'\n                }`}\n        >\n            <div className='modal-confirm-container'>\n                <h3>Are you sure you want to {confirmModalContent.type}:</h3>\n                <ul>\n                    <li>Consumer: {confirmModalContent.consumer}</li>\n                    <li>Provider: {confirmModalContent.provider}</li>\n                    <li>typeOfService: {confirmModalContent.typeOfService}</li>\n                    <li>price: {confirmModalContent.price}</li>\n                    <li>txFee: {confirmModalContent.txFee}</li>\n                </ul>\n                <button className='close-modal-btn' onClick={closeConfirmModal}>\n                    <FaTimes></FaTimes>\n                </button>\n                <button className='confirm-modal-btn' onClick={confirm}>Confirm</button>\n            </div>\n        </div>\n    )\n};\n\nexport default ConfirmModal","import React, { useEffect } from 'react';\nimport {useGlobalContext} from \"../../context/context\";\n\nimport Sidebar from '../layout/Sidebar';\nimport Modal from '../misc/Modal';\nimport BlockchainData from '../misc/BlockchainData';\nimport ConfirmModal from '../misc/ConfirmModal';\n\n\nconst Blockchain = () => {\n    const { gameData, isGameOn, setModalContent } = useGlobalContext();\n\n\n    useEffect(() => {\n        const checkLoggedInAndGame = async () => {\n            let token = localStorage.getItem(\"auth-token\");\n            let playerId = localStorage.getItem(\"playerId\");\n            if (token !== (null || \"\") && playerId !== (null || \"\")) {\n                if (!isGameOn) {\n                    setModalContent('Wait for the admin to start the game!');\n                }\n            } else {\n                setModalContent('Please log in!');\n            }\n        };\n        checkLoggedInAndGame();\n    }, []);\n\n    return (\n        <div>\n            <div>\n                {\n                    gameData.player ? (\n                        <div>\n                            {\n                                isGameOn ? (\n                                    <div>\n                                        <div className=\"home-grid\">\n                                            <div className=\"item-sidebar\">\n                                                <Sidebar/>\n                                            </div>\n                                            <div className=\"item-content\">\n                                                <BlockchainData/>\n                                            </div>\n                                        </div>\n                                        <ConfirmModal/>\n                                    </div>\n                                ) : (\n                                    <>\n                                        <Modal/>\n                                    </>\n                                )\n                            }\n                        </div>\n\n                    ) : (\n                        <>\n                            <Modal/>\n                        </>\n                    )\n                }\n            </div>\n        </div>\n    )\n};\n\nexport default Blockchain","import React from 'react';\n\n\nconst Error = () => {\n\n    return (\n        <div>\n            <h1>Ups something went wrong!</h1>\n        </div>\n    )\n};\n\nexport default Error","import React, { useEffect } from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport {useGlobalContext} from \"./context/context\";\n\nimport Navbar from './components/layout/Navbar';\nimport Home from './components/pages/Home';\nimport Login from \"./components/auth/Login\";\nimport Trade from './components/pages/Trade';\nimport Blockchain from './components/pages/Blockchain';\nimport Error from './components/pages/Error';\nimport Axios from \"axios/index\";\n\nAxios.defaults.baseURL = '5.189.178.30:8000';\n\nfunction App() {\n    const { setIsGameOn, setGameData } = useGlobalContext();\n\n    const getGameData = async () => {\n        try {\n            let token = localStorage.getItem(\"auth-token\");\n            let playerId = localStorage.getItem(\"playerId\");\n            const gameRes = await Axios.get(`/player/gameData/${playerId}`, {\n                headers: {\"authorization\": \"Bearer \" + token}\n            });\n            setGameData({\n                token,\n                player: gameRes.data.player,\n                orders: gameRes.data.orders,\n                allPendingTransactions: gameRes.data.allPendingTransactions,\n                totalStake: gameRes.data.totalStake,\n                players: gameRes.data.players,\n                allTransactions: gameRes.data.allTransactions,\n                miningTime: gameRes.data.miningTime\n            });\n            setIsGameOn(gameRes.data.isGameOn);\n        } catch (err) {\n            if (err.response !== undefined && err.response.data.message === \"Auth failed\") {\n                localStorage.setItem(\"auth-token\", \"\");\n                localStorage.setItem(\"playerId\", \"\");\n                window.location.reload(false);\n            }\n        }\n    };\n\n    useEffect(() => {\n        const checkLoggedInAndGame = async () => {\n            let token = localStorage.getItem(\"auth-token\");\n            let playerId = localStorage.getItem(\"playerId\");\n            if (token !== (null || \"\") && playerId !== (null || \"\")) {\n                getGameData();\n                const interval = setInterval(() => {\n                    getGameData();\n                }, 100);\n                return () => {\n                    clearInterval(interval);\n                };\n            }\n        };\n        checkLoggedInAndGame();\n    }, []);\n\n    return (\n        <>\n            <Router>\n                <Navbar/>\n                <Switch>\n                    <Route exact path={\"/\"} component={Home} />\n                    <Route path={\"/login\"} component={Login}/>\n                    <Route path={\"/trade\"} component={Trade}/>\n                    <Route path={\"/blockchain\"} component={Blockchain}/>\n                    <Route path={\"*\"} component={Error}/>\n                </Switch>\n            </Router>\n        </>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {AppProvider} from \"./context/context\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <AppProvider>\n            <App/>\n        </AppProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}