{"ast":null,"code":"var _jsxFileName = \"/home/nejc/LDSE/SharedManufacturing/client/src/components/misc/BarChart.js\";\nimport React from 'react';\nimport { ResponsiveBar } from '@nivo/bar';\nimport { useGlobalContext } from \"../../context/context\";\n\nconst BarChart = ({\n  data\n}) => {\n  const {\n    gameData,\n    openTradeModal,\n    setTradeModalContent,\n    openCancelOrderModal,\n    setCancelOrderModalContent\n  } = useGlobalContext();\n\n  const setTradeModal = data => {\n    if (data.typeOfService !== gameData.player.typeOfService) {\n      setTradeModalContent(data);\n      openTradeModal();\n    } else {\n      if (data.playerName.match(/[a-zA-Z]+/g)[0] === gameData.player.playerName) {\n        setCancelOrderModalContent(data);\n        openCancelOrderModal();\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ResponsiveBar, {\n    data: data,\n    onClick: data => setTradeModal(data.data),\n    keys: ['price'],\n    indexBy: \"playerName\",\n    margin: {\n      top: 10,\n      right: 130,\n      bottom: 50,\n      left: 70\n    },\n    padding: 0.25,\n    valueScale: {\n      type: 'linear'\n    },\n    theme: {\n      \"fontSize\": 14,\n      fontFamily: \"Roboto, sans-serif\",\n      axis: {\n        legend: {\n          text: {\n            fontSize: \"16px\",\n            fontWeight: \"bold\",\n            fontFamily: \"Roboto, sans-serif\"\n          }\n        }\n      }\n    },\n    colors: d => d.data.color,\n    borderColor: {\n      from: 'color',\n      modifiers: [['darker', 1.6]]\n    },\n    axisTop: null,\n    axisRight: null,\n    axisBottom: {\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0\n    },\n    axisLeft: {\n      tickSize: 5,\n      tickPadding: 5,\n      tickRotation: 0,\n      legend: 'PRICE',\n      legendPosition: 'middle',\n      legendOffset: -50,\n      tickValues: 5\n    },\n    labelSkipWidth: 12,\n    labelSkipHeight: 12,\n    labelTextColor: \"white\",\n    legends: [{\n      dataFrom: 'keys',\n      anchor: 'bottom-right',\n      direction: 'column',\n      justify: false,\n      translateX: 120,\n      translateY: 0,\n      itemsSpacing: 2,\n      itemWidth: 100,\n      itemHeight: 20,\n      itemDirection: 'left-to-right',\n      itemOpacity: 0.85,\n      symbolSize: 20,\n      effects: [{\n        on: 'hover',\n        style: {\n          itemOpacity: 1\n        }\n      }]\n    }],\n    animate: true,\n    motionStiffness: 90,\n    motionDamping: 15,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default BarChart;","map":{"version":3,"sources":["/home/nejc/LDSE/SharedManufacturing/client/src/components/misc/BarChart.js"],"names":["React","ResponsiveBar","useGlobalContext","BarChart","data","gameData","openTradeModal","setTradeModalContent","openCancelOrderModal","setCancelOrderModalContent","setTradeModal","typeOfService","player","playerName","match","top","right","bottom","left","type","fontFamily","axis","legend","text","fontSize","fontWeight","d","color","from","modifiers","tickSize","tickPadding","tickRotation","legendPosition","legendOffset","tickValues","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","style"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { ResponsiveBar } from '@nivo/bar';\nimport { useGlobalContext} from \"../../context/context\";\n\nconst BarChart = ({data}) => {\n    const { gameData, openTradeModal, setTradeModalContent, openCancelOrderModal, setCancelOrderModalContent } = useGlobalContext();\n\n    const setTradeModal = (data) => {\n        if (data.typeOfService !== gameData.player.typeOfService) {\n            setTradeModalContent(data);\n            openTradeModal();\n        } else {\n            if (data.playerName.match(/[a-zA-Z]+/g)[0] === gameData.player.playerName) {\n                setCancelOrderModalContent(data);\n                openCancelOrderModal();\n            }\n        }\n    };\n\n\n    return (\n        <ResponsiveBar\n            data={data}\n            onClick={(data) => setTradeModal(data.data)}\n            keys={[ 'price' ]}\n            indexBy=\"playerName\"\n            margin={{ top: 10, right: 130, bottom: 50, left: 70 }}\n            padding={0.25}\n            valueScale={{ type: 'linear' }}\n            theme={{ \"fontSize\": 14, fontFamily: \"Roboto, sans-serif\", axis: { legend: { text: { fontSize: \"16px\", fontWeight: \"bold\", fontFamily: \"Roboto, sans-serif\" } } } }}\n            colors={d => d.data.color}\n            borderColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\n            axisTop={null}\n            axisRight={null}\n            axisBottom={{\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n            }}\n            axisLeft={{\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend: 'PRICE',\n                legendPosition: 'middle',\n                legendOffset: -50,\n                tickValues: 5\n            }}\n            labelSkipWidth={12}\n            labelSkipHeight={12}\n            labelTextColor=\"white\"\n            legends={[\n                {\n                    dataFrom: 'keys',\n                    anchor: 'bottom-right',\n                    direction: 'column',\n                    justify: false,\n                    translateX: 120,\n                    translateY: 0,\n                    itemsSpacing: 2,\n                    itemWidth: 100,\n                    itemHeight: 20,\n                    itemDirection: 'left-to-right',\n                    itemOpacity: 0.85,\n                    symbolSize: 20,\n                    effects: [\n                        {\n                            on: 'hover',\n                            style: {\n                                itemOpacity: 1\n                            }\n                        }\n                    ]\n                }\n            ]}\n            animate={true}\n            motionStiffness={90}\n            motionDamping={15}\n        />\n    )\n};\n\n\nexport default BarChart"]},"metadata":{},"sourceType":"module"}