{"ast":null,"code":"var _jsxFileName = \"/home/nejc/LDSE/SharedManufacturing/client/src/components/misc/BlockchainData.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useGlobalContext } from \"../../context/context\";\nimport PieChart from '../misc/PieChart';\nimport TransactionsTable from '../misc/TransactionsTable';\nimport Axios from \"axios/index\";\n\nconst BlockchainData = () => {\n  const {\n    gameData\n  } = useGlobalContext();\n  const [chartDataArray, setChartDataArray] = useState([]);\n  const [relativeStake, setRelativeStake] = useState(0);\n  const [newStake, setNewStake] = useState(0);\n  const [txFee, setTxFee] = useState();\n  const [showAlert, setShowAlert] = useState(false);\n  const [alertContent, setAlertContent] = useState('');\n\n  const countDecimals = value => {\n    if (Math.floor(value).toString() === value) return 0;\n    return value.toString().split(\".\")[1].length || 0;\n  };\n\n  const confirm = async () => {\n    try {\n      if (txFee === undefined || txFee === \"\" || newStake === undefined || newStake === \"\") {\n        setAlertContent('You must enter a value');\n        setShowAlert(true);\n      } else {\n        if (isNaN(txFee) || txFee < 0) {\n          setAlertContent('Tx fee must be a positive number');\n          setShowAlert(true);\n        } else {\n          if (countDecimals(txFee) > 1 || countDecimals(newStake) > 1) {\n            setAlertContent('Input value can have at most one decimal place');\n            setShowAlert(true);\n          } else {\n            if (newStake + parseFloat(txFee) > gameData.player.balance) {\n              setAlertContent('Amount and TxFee is higher than balance');\n              setShowAlert(true);\n            } else {\n              const token = localStorage.getItem(\"auth-token\");\n              const playerId = localStorage.getItem(\"playerId\");\n\n              if (newStake > 0) {\n                const data = {\n                  stake: newStake.toString(),\n                  txFee: txFee\n                };\n                const options = {\n                  headers: {\n                    Authorization: \"Bearer \" + token\n                  }\n                };\n                const confirmRes = await Axios.post(`http://localhost:8000/player/stake/${playerId}`, data, options);\n              }\n\n              if (newStake < 0) {\n                const newUnstake = -newStake;\n                const data = {\n                  unstake: newUnstake.toString(),\n                  txFee: txFee\n                };\n                const options = {\n                  headers: {\n                    Authorization: \"Bearer \" + token\n                  }\n                };\n                const confirmRes = await Axios.post(`http://localhost:8000/player/unstake/${playerId}`, data, options);\n              }\n\n              setNewStake(0);\n              setAlertContent('');\n              setShowAlert(false);\n              setTxFee();\n              document.getElementById(\"inputHolder\").value = \"\";\n              document.getElementById(\"amountHolder\").value = \"\";\n            }\n          }\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    const createDataArray = async () => {\n      const dataArray = await gameData.players.map(item => {\n        return {\n          id: item.playerName,\n          value: parseInt(item.stake)\n        };\n      });\n      setChartDataArray(dataArray);\n    };\n\n    createDataArray();\n    let newRelativeStake = Math.floor(gameData.player.stake / gameData.totalStake * 100);\n    setRelativeStake(newRelativeStake);\n  }, [gameData]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"blockchain-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"blockchain-info-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TransactionsTable, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"piechart-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"piechart-container-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 29\n    }\n  }, \"Blockchain - stake\"), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 29\n    }\n  }, \"Your stake: \", gameData.player.stake, \" (\", relativeStake, \"%)\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"piechart-container-chart-stake\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"piechart-container-chart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(PieChart, {\n    data: chartDataArray,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stake-input-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"switch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"slider round\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 41\n    }\n  })), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 33\n    }\n  }, \" Stake/Unstake\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-input-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"Amount\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 37\n    }\n  }, \"Amount\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-input-group-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      backgroundColor: \"#d9d9d9\"\n    },\n    type: \"text\",\n    name: \"amount\",\n    id: \"amountHolder\",\n    placeholder: \"Enter amount\",\n    onChange: e => setNewStake(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 41\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-input-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"txFee\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 37\n    }\n  }, \"Tx Fee\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-input-group-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      backgroundColor: \"#d4d4d4\"\n    },\n    type: \"text\",\n    name: \"txFee\",\n    id: \"inputHolder\",\n    placeholder: \"Enter tx fee\",\n    onChange: e => setTxFee(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 41\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: `${showAlert ? 'modal-input-alert show-modal-input-alert' : 'modal-input-alert'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 33\n    }\n  }, alertContent), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"confirm-modal-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 33\n    }\n  }, newStake < 0 ? 'Unstake' : 'Stake')))))));\n};\n\nexport default BlockchainData;","map":{"version":3,"sources":["/home/nejc/LDSE/SharedManufacturing/client/src/components/misc/BlockchainData.js"],"names":["React","useState","useEffect","useGlobalContext","PieChart","TransactionsTable","Axios","BlockchainData","gameData","chartDataArray","setChartDataArray","relativeStake","setRelativeStake","newStake","setNewStake","txFee","setTxFee","showAlert","setShowAlert","alertContent","setAlertContent","countDecimals","value","Math","floor","toString","split","length","confirm","undefined","isNaN","parseFloat","player","balance","token","localStorage","getItem","playerId","data","stake","options","headers","Authorization","confirmRes","post","newUnstake","unstake","document","getElementById","err","console","log","createDataArray","dataArray","players","map","item","id","playerName","parseInt","newRelativeStake","totalStake","backgroundColor","e","target"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { useGlobalContext} from \"../../context/context\";\nimport PieChart from '../misc/PieChart';\nimport TransactionsTable from '../misc/TransactionsTable';\nimport Axios from \"axios/index\";\n\n\n\nconst BlockchainData = () => {\n    const { gameData } = useGlobalContext();\n    const [chartDataArray, setChartDataArray] = useState([]);\n    const [relativeStake, setRelativeStake] = useState(0);\n    const [newStake, setNewStake] = useState(0);\n    const [txFee, setTxFee] = useState();\n    const [showAlert, setShowAlert] = useState(false);\n    const [alertContent, setAlertContent] = useState('');\n\n    const countDecimals = (value) => {\n        if(Math.floor(value).toString() === value) return 0;\n        return value.toString().split(\".\")[1].length || 0;\n    };\n\n    const confirm = async () => {\n        try {\n            if ((txFee === undefined || txFee === \"\") || (newStake === undefined || newStake === \"\")) {\n                setAlertContent('You must enter a value');\n                setShowAlert(true);\n            } else {\n                if (isNaN(txFee) || txFee < 0) {\n                    setAlertContent('Tx fee must be a positive number');\n                    setShowAlert(true);\n                } else {\n                    if ((countDecimals(txFee) > 1) || (countDecimals(newStake) > 1)) {\n                        setAlertContent('Input value can have at most one decimal place');\n                        setShowAlert(true);\n                    } else {\n                        if (newStake+parseFloat(txFee) > gameData.player.balance) {\n                            setAlertContent('Amount and TxFee is higher than balance');\n                            setShowAlert(true);\n                        } else {\n                            const token = localStorage.getItem(\"auth-token\");\n                            const playerId = localStorage.getItem(\"playerId\");\n                            if (newStake > 0) {\n                                const data = {\n                                    stake: newStake.toString(),\n                                    txFee: txFee\n                                };\n                                const options = {\n                                    headers: {\n                                        Authorization: \"Bearer \" + token\n                                    }\n                                };\n                                const confirmRes =  await Axios.post(`http://localhost:8000/player/stake/${playerId}`, data, options);\n                            } if (newStake < 0) {\n                                const newUnstake = -newStake;\n                                const data = {\n                                    unstake: newUnstake.toString(),\n                                    txFee: txFee\n                                };\n                                const options = {\n                                    headers: {\n                                        Authorization: \"Bearer \" + token\n                                    }\n                                };\n                                const confirmRes =  await Axios.post(`http://localhost:8000/player/unstake/${playerId}`, data, options);\n                            }\n                            setNewStake(0);\n                            setAlertContent('');\n                            setShowAlert(false);\n                            setTxFee();\n                            document.getElementById(\"inputHolder\").value= \"\";\n                            document.getElementById(\"amountHolder\").value= \"\";\n                        }\n                    }\n                }\n            }\n\n        } catch(err) {\n            console.log(err);\n        }\n    };\n\n    useEffect(() => {\n        const createDataArray = async () => {\n            const dataArray = await gameData.players.map((item) => {\n                return({\n                    id: item.playerName,\n                    value: parseInt(item.stake)\n                });\n            });\n            setChartDataArray(dataArray);\n        };\n        createDataArray();\n        let newRelativeStake = Math.floor((gameData.player.stake / gameData.totalStake) * 100);\n        setRelativeStake(newRelativeStake);\n    }, [gameData]);\n\n\n\n    return (\n        <>\n            <div className=\"blockchain-container\">\n                <div className=\"blockchain-info-container\">\n                    <TransactionsTable/>\n                    <div className=\"piechart-container\">\n                        <div className=\"piechart-container-text\">\n                            <h3>Blockchain - stake</h3>\n                            <h4>Your stake: {gameData.player.stake} ({relativeStake}%)</h4>\n                        </div>\n                        <div className=\"piechart-container-chart-stake\">\n                            <div className=\"piechart-container-chart\">\n                                <PieChart data={chartDataArray}/>\n                            </div>\n                            <div className=\"stake-input-container\">\n                                <label className=\"switch\">\n                                    <input type=\"checkbox\"/>\n                                        <span className=\"slider round\"></span>\n                                </label>\n                                <span> Stake/Unstake</span>\n                                <div className={\"modal-input-group\"}>\n                                    <label htmlFor={\"Amount\"}>Amount</label>\n                                    <div className=\"modal-input-group-container\">\n                                        <input style={{backgroundColor: \"#d9d9d9\"}} type={\"text\"} name={\"amount\"} id={\"amountHolder\"} placeholder={\"Enter amount\"} onChange={e => setNewStake(e.target.value)}/>\n                                    </div>\n                                </div>\n                                <div className={\"modal-input-group\"}>\n                                    <label htmlFor={\"txFee\"}>Tx Fee</label>\n                                    <div className=\"modal-input-group-container\">\n                                        <input style={{backgroundColor: \"#d4d4d4\"}} type={\"text\"} name={\"txFee\"} id={\"inputHolder\"} placeholder={\"Enter tx fee\"} onChange={e => setTxFee(e.target.value)}/>\n                                    </div>\n                                </div>\n                                <div className={`${showAlert? 'modal-input-alert show-modal-input-alert' : 'modal-input-alert'}`}>\n                                    {alertContent}\n                                </div>\n                                <button className='confirm-modal-btn'>{newStake < 0 ? 'Unstake' : 'Stake'}</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n};\n\nexport default BlockchainData"]},"metadata":{},"sourceType":"module"}