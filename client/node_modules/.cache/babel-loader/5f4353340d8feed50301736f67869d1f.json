{"ast":null,"code":"var _jsxFileName = \"/home/nejc/LDSE/SharedManufacturing/client/src/components/misc/BlockchainData.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useGlobalContext } from \"../../context/context\";\nimport PieChart from '../misc/PieChart';\nimport TransactionsTable from '../misc/TransactionsTable';\nimport AllTransactionsTable from '../misc/AllTransactionsTable';\nimport Axios from \"axios/index\";\n\nconst BlockchainData = () => {\n  const {\n    gameData\n  } = useGlobalContext();\n  const [chartDataArray, setChartDataArray] = useState([]);\n  const [relativeStake, setRelativeStake] = useState(0);\n  const [newStake, setNewStake] = useState(0);\n  const [txFee, setTxFee] = useState();\n  const [showAlert, setShowAlert] = useState(false);\n  const [alertContent, setAlertContent] = useState('');\n\n  const countDecimals = value => {\n    if (Math.floor(value).toString() === value) return 0;\n    return value.toString().split(\".\")[1].length || 0;\n  };\n\n  const confirmStake = async () => {\n    try {\n      if (txFee === undefined || txFee === \"\" || newStake === undefined || newStake === \"\") {\n        setAlertContent('You must enter a value');\n        setShowAlert(true);\n      } else {\n        if (isNaN(txFee) || txFee <= 0 || isNaN(newStake) || newStake <= 0) {\n          setAlertContent('Amount and tx fee must be a positive number bigger than 0');\n          setShowAlert(true);\n        } else {\n          if (countDecimals(txFee) > 1 || countDecimals(newStake) > 1) {\n            setAlertContent('Input value can have at most one decimal place');\n            setShowAlert(true);\n          } else {\n            if (parseFloat(newStake) + parseFloat(txFee) > gameData.player.balance) {\n              setAlertContent('Amount + TxFee is bigger than balance');\n              setShowAlert(true);\n            } else {\n              const token = localStorage.getItem(\"auth-token\");\n              const playerId = localStorage.getItem(\"playerId\");\n              const data = {\n                stake: newStake,\n                txFee: txFee\n              };\n              const options = {\n                headers: {\n                  Authorization: \"Bearer \" + token\n                }\n              };\n              const confirmRes = await Axios.post(`http://localhost:8000/player/stake/${playerId}`, data, options);\n              setNewStake(0);\n              setAlertContent('');\n              setShowAlert(false);\n              setTxFee();\n              document.getElementById(\"inputHolder\").value = \"\";\n              document.getElementById(\"amountHolder\").value = \"\";\n            }\n          }\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const confirmUnstake = async () => {\n    try {\n      if (txFee === undefined || txFee === \"\" || newStake === undefined || newStake === \"\") {\n        setAlertContent('You must enter a value');\n        setShowAlert(true);\n      } else {\n        if (isNaN(txFee) || txFee <= 0 || isNaN(newStake) || newStake <= 0) {\n          setAlertContent('Amount and tx fee must be a positive number bigger than 0');\n          setShowAlert(true);\n        } else {\n          if (countDecimals(txFee) > 1 || countDecimals(newStake) > 1) {\n            setAlertContent('Input value can have at most one decimal place');\n            setShowAlert(true);\n          } else {\n            if (parseFloat(newStake) > gameData.player.stake) {\n              setAlertContent('Amount is bigger than your stake');\n              setShowAlert(true);\n            } else {\n              const token = localStorage.getItem(\"auth-token\");\n              const playerId = localStorage.getItem(\"playerId\");\n              const data = {\n                unstake: newStake,\n                txFee: txFee\n              };\n              const options = {\n                headers: {\n                  Authorization: \"Bearer \" + token\n                }\n              };\n              const confirmRes = await Axios.post(`http://localhost:8000/player/unstake/${playerId}`, data, options);\n              setNewStake(0);\n              setAlertContent('');\n              setShowAlert(false);\n              setTxFee();\n              document.getElementById(\"inputHolder\").value = \"\";\n              document.getElementById(\"amountHolder\").value = \"\";\n            }\n          }\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    const createDataArray = async () => {\n      const dataArray = await gameData.players.map(item => {\n        return {\n          id: item.playerName,\n          value: parseInt(item.stake)\n        };\n      });\n      setChartDataArray(dataArray);\n    };\n\n    createDataArray();\n    let newRelativeStake = Math.floor(gameData.player.stake / gameData.totalStake * 100);\n    setRelativeStake(newRelativeStake);\n  }, [gameData]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"blockchain-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"blockchain-info-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TransactionsTable, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"piechart-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"piechart-container-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 29\n    }\n  }, \"Blockchain - stake\"), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 29\n    }\n  }, \"Your stake: \", gameData.player.stake, \" (\", relativeStake, \"%)\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"piechart-container-chart-stake\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"piechart-container-chart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(PieChart, {\n    data: chartDataArray,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"stake-input-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-input-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"Amount\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 37\n    }\n  }, \"Amount\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-input-group-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      backgroundColor: \"#dbdbdb\"\n    },\n    type: \"text\",\n    name: \"amount\",\n    id: \"amountHolder\",\n    placeholder: \"Enter amount\",\n    onChange: e => setNewStake(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 41\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-input-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"txFee\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 37\n    }\n  }, \"Tx Fee\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-input-group-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      backgroundColor: \"#dbdbdb\"\n    },\n    type: \"text\",\n    name: \"txFee\",\n    id: \"inputHolder\",\n    placeholder: \"Enter tx fee\",\n    onChange: e => setTxFee(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 41\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: `${showAlert ? 'modal-input-alert show-modal-input-alert' : 'modal-input-alert'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 33\n    }\n  }, alertContent), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"confirm-modal-btn\",\n    onClick: () => confirmStake(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 33\n    }\n  }, \"Stake\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"confirm-modal-btn\",\n    onClick: () => confirmUnstake(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 33\n    }\n  }, \"Unstake\"))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"all-transactions-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 21\n    }\n  }, \"Transactions History\"), /*#__PURE__*/React.createElement(AllTransactionsTable, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default BlockchainData;","map":{"version":3,"sources":["/home/nejc/LDSE/SharedManufacturing/client/src/components/misc/BlockchainData.js"],"names":["React","useState","useEffect","useGlobalContext","PieChart","TransactionsTable","AllTransactionsTable","Axios","BlockchainData","gameData","chartDataArray","setChartDataArray","relativeStake","setRelativeStake","newStake","setNewStake","txFee","setTxFee","showAlert","setShowAlert","alertContent","setAlertContent","countDecimals","value","Math","floor","toString","split","length","confirmStake","undefined","isNaN","parseFloat","player","balance","token","localStorage","getItem","playerId","data","stake","options","headers","Authorization","confirmRes","post","document","getElementById","err","console","log","confirmUnstake","unstake","createDataArray","dataArray","players","map","item","id","playerName","parseInt","newRelativeStake","totalStake","backgroundColor","e","target"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { useGlobalContext} from \"../../context/context\";\nimport PieChart from '../misc/PieChart';\nimport TransactionsTable from '../misc/TransactionsTable';\nimport AllTransactionsTable from '../misc/AllTransactionsTable';\nimport Axios from \"axios/index\";\n\n\n\nconst BlockchainData = () => {\n    const { gameData } = useGlobalContext();\n    const [chartDataArray, setChartDataArray] = useState([]);\n    const [relativeStake, setRelativeStake] = useState(0);\n    const [newStake, setNewStake] = useState(0);\n    const [txFee, setTxFee] = useState();\n    const [showAlert, setShowAlert] = useState(false);\n    const [alertContent, setAlertContent] = useState('');\n\n    const countDecimals = (value) => {\n        if(Math.floor(value).toString() === value) return 0;\n        return value.toString().split(\".\")[1].length || 0;\n    };\n\n    const confirmStake = async () => {\n        try {\n            if ((txFee === undefined || txFee === \"\") || (newStake === undefined || newStake === \"\")) {\n                setAlertContent('You must enter a value');\n                setShowAlert(true);\n            } else {\n                if ((isNaN(txFee) || txFee <= 0) || (isNaN(newStake) || newStake <= 0)) {\n                    setAlertContent('Amount and tx fee must be a positive number bigger than 0');\n                    setShowAlert(true);\n                } else {\n                    if ((countDecimals(txFee) > 1) || (countDecimals(newStake) > 1)) {\n                        setAlertContent('Input value can have at most one decimal place');\n                        setShowAlert(true);\n                    } else {\n                        if (parseFloat(newStake)+parseFloat(txFee) > gameData.player.balance) {\n                            setAlertContent('Amount + TxFee is bigger than balance');\n                            setShowAlert(true);\n                        } else {\n                            const token = localStorage.getItem(\"auth-token\");\n                            const playerId = localStorage.getItem(\"playerId\");\n                            const data = {\n                                stake: newStake,\n                                txFee: txFee\n                            };\n                            const options = {\n                                headers: {\n                                    Authorization: \"Bearer \" + token\n                                }\n                            };\n                            const confirmRes =  await Axios.post(`http://localhost:8000/player/stake/${playerId}`, data, options);\n                            setNewStake(0);\n                            setAlertContent('');\n                            setShowAlert(false);\n                            setTxFee();\n                            document.getElementById(\"inputHolder\").value= \"\";\n                            document.getElementById(\"amountHolder\").value= \"\";\n                        }\n                    }\n                }\n            }\n\n        } catch(err) {\n            console.log(err);\n        }\n    };\n\n    const confirmUnstake = async () => {\n        try {\n            if ((txFee === undefined || txFee === \"\") || (newStake === undefined || newStake === \"\")) {\n                setAlertContent('You must enter a value');\n                setShowAlert(true);\n            } else {\n                if ((isNaN(txFee) || txFee <= 0) || (isNaN(newStake) || newStake <= 0)) {\n                    setAlertContent('Amount and tx fee must be a positive number bigger than 0');\n                    setShowAlert(true);\n                } else {\n                    if ((countDecimals(txFee) > 1) || (countDecimals(newStake) > 1)) {\n                        setAlertContent('Input value can have at most one decimal place');\n                        setShowAlert(true);\n                    } else {\n                        if (parseFloat(newStake) > gameData.player.stake) {\n                            setAlertContent('Amount is bigger than your stake');\n                            setShowAlert(true);\n                        } else {\n                            const token = localStorage.getItem(\"auth-token\");\n                            const playerId = localStorage.getItem(\"playerId\");\n                            const data = {\n                                unstake: newStake,\n                                txFee: txFee\n                            };\n                            const options = {\n                                headers: {\n                                    Authorization: \"Bearer \" + token\n                                }\n                            };\n                            const confirmRes =  await Axios.post(`http://localhost:8000/player/unstake/${playerId}`, data, options);\n                            setNewStake(0);\n                            setAlertContent('');\n                            setShowAlert(false);\n                            setTxFee();\n                            document.getElementById(\"inputHolder\").value= \"\";\n                            document.getElementById(\"amountHolder\").value= \"\";\n                        }\n                    }\n                }\n            }\n\n        } catch(err) {\n            console.log(err);\n        }\n    };\n\n    useEffect(() => {\n        const createDataArray = async () => {\n            const dataArray = await gameData.players.map((item) => {\n                return({\n                    id: item.playerName,\n                    value: parseInt(item.stake)\n                });\n            });\n            setChartDataArray(dataArray);\n        };\n        createDataArray();\n        let newRelativeStake = Math.floor((gameData.player.stake / gameData.totalStake) * 100);\n        setRelativeStake(newRelativeStake);\n    }, [gameData]);\n\n\n\n    return (\n        <>\n            <div className=\"blockchain-container\">\n                <div className=\"blockchain-info-container\">\n                    <TransactionsTable/>\n                    <div className=\"piechart-container\">\n                        <div className=\"piechart-container-text\">\n                            <h3>Blockchain - stake</h3>\n                            <h4>Your stake: {gameData.player.stake} ({relativeStake}%)</h4>\n                        </div>\n                        <div className=\"piechart-container-chart-stake\">\n                            <div className=\"piechart-container-chart\">\n                                <PieChart data={chartDataArray}/>\n                            </div>\n                            <div className=\"stake-input-container\">\n                                <div className={\"modal-input-group\"}>\n                                    <label htmlFor={\"Amount\"}>Amount</label>\n                                    <div className=\"modal-input-group-container\">\n                                        <input style={{backgroundColor: \"#dbdbdb\"}} type={\"text\"} name={\"amount\"} id={\"amountHolder\"} placeholder={\"Enter amount\"} onChange={e => setNewStake(e.target.value)}/>\n                                    </div>\n                                </div>\n                                <div className={\"modal-input-group\"}>\n                                    <label htmlFor={\"txFee\"}>Tx Fee</label>\n                                    <div className=\"modal-input-group-container\">\n                                        <input style={{backgroundColor: \"#dbdbdb\"}} type={\"text\"} name={\"txFee\"} id={\"inputHolder\"} placeholder={\"Enter tx fee\"} onChange={e => setTxFee(e.target.value)}/>\n                                    </div>\n                                </div>\n                                <div className={`${showAlert? 'modal-input-alert show-modal-input-alert' : 'modal-input-alert'}`}>\n                                    {alertContent}\n                                </div>\n                                <button className='confirm-modal-btn' onClick={() => confirmStake()}>Stake</button>\n                                <button className='confirm-modal-btn' onClick={() => confirmUnstake()}>Unstake</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"all-transactions-container\">\n                    <h3>Transactions History</h3>\n                    <AllTransactionsTable/>\n                </div>\n            </div>\n        </>\n    )\n};\n\nexport default BlockchainData"]},"metadata":{},"sourceType":"module"}